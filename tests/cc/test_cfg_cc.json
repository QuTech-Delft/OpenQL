{
	// author: 	Wouter Vlothuizen
	// notes:


	// The qubits in our setup have the following roles:
	// - D = data
	// - X = ancilla's performing X-type parity checks
	// - Z = idem, Z-type
	//
	// The S-17 layout is shown below, connectivity is between horizontal and vertical neighbors.
	// Based on references:
	// 1) Figure 1 of '1612.08208v1.pdf', rotated by 45 deg
	// 2) 'S17 design considerations_for_Xiang.pdf', renumbered from 0
	//
	// 	-- Z0 D0 -- --
	// 	-- D3 X1 D1 X0
	// 	D6 Z2 D4 Z1 D2
	// 	X3 D7 X2 D5 --
	// 	-- -- D8 Z3 --
	//
	// The frequency assignment of the qubits is (L=low, Mg/My=medium green/yellow, H=high), based on reference 2) :
	// 	-  Mg H  -  -
	// 	-  L  My H  Mg
	// 	H  My L  Mg H
	// 	My H  Mg L  -
	// 	-  -  H  My -
	//
    // FIXME: replaced, see below
	// We propose the following grid based qubit numbering scheme with the following properties:
	// - starts at 0 and exceeds the number of qubits actually implemented
	// - data quits have even numbers
	// - qubit N is connected to N-1, N+1, N-5, N+5 (insofar present)
	//
	//		-	1	2	-	-
	//		-  6	7  8  9
	//		10 11 12 13 14
	//		15 16 17 18 -
	//		-  -  22 23 -
	//
	//	Combining the above (and taking the feed lines from reference 2), we arrive at the following table
	//
	// 	index	qubit	name		Freq		feed line
	// 	----------------------------------------
	//		0		1		Z0			Mg			1
	//		1		2		D0			H			1
	//		2		6		D3			L			1
	//		3		7		X1			My			1
	//		4		8		D1			H			2
	//		5		9		X0			Mg			2
	//		6		10		D6			H			0
	//		7		11		Z2			My			1
	//		8		12		D4			L			1
	//		9		13		Z1			Mg			2
	//		10		14		D2			H			2
	//		11		15		X3			My			0
	//		12		16		D7			H			1
	//		13		17		X2			Mg			1
	//		14		18		D5			L			2
	//		15		22		D8			H			1
	//		16		23		Z3			My			2


    // FIXME: new numbering instead of above
    // We use the following qubit numbering scheme with *(x,y) coordinates as shown:
    //
    //   x  0  1  2  3  4
    // y ----------------
    // 0 |  -  0  1  -  -
    // 1 |  -  2  3  4  5
    // 2 |  6  7  8  9 10
    // 3 | 11 12 13 14 -
    // 4 |  -  - 15 16 -
    //
    // - data quits have even numbers
    // - qubit at (x,y) is connected to those at (x-1,y), (x+1,y), (x,y-1), (x,y+1) (insofar present)
    //
    //  Combining the above (and taking the feed lines from reference 2), we arrive at the following table
    //
    //  qubit   name        Freq        feed line
    //  ----------------------------------------
    //      0       Z0          Mg          1
    //      1       D0          H           1
    //      2       D3          L           1
    //      3       X1          My          1
    //      4       D1          H           2
    //      5       X0          Mg          2
    //      6       D6          H           0
    //      7       Z2          My          1
    //      8       D4          L           1
    //      9       Z1          Mg          2
    //      10      D2          H           2
    //      11      X3          My          0
    //      12      D7          H           1
    //      13      X2          Mg          1
    //      14      D5          L           2
    //      15      D8          H           1
    //      16      Z3          My          2


	// FIXME: proposed header, not used
	"file_type": "OpenQL-config",
	"file_version": "0.3",
	"min_version_openql": "0.6.0",

	"eqasm_compiler" : "cc",

	"hardware_settings": {
		"qubit_number": 25,     // of which 17 are used. FIXME: duplicates 'hardware_settings/qubit_number'
		"cycle_time" : 20,        // in [ns]

		// FIXME: we put this key inside "hardware_settings" for now, but it should preferably be below "backend" or "eqasm_compiler"
		"eqasm_backend_cc": {
			// Immutable properties of instruments.
            // Sub keys for "instrument_definitions":
            // - <key>                          a name which can be referred to from key 'instruments/[]/ref_instrument_definition'
            // - <key>/channels                 number of channels (either firmware (UHF-QC) or hardware)
            // - <key>/control_group_sizes      possible arrangements of channels operating as a vector
            // - <key>/latency                  latency from trigger to output in [ns]. FIXME: where do we account for other latencies
			// FIXME: introduce 'controller_definitions' for CC and friends?
			"instrument_definitions": {
				"qutech-qwg": {
					"channels": 4,
					"control_group_sizes": [1, 4],
					"latency": 50		// FIXME: check
				},
				"zi-hdawg": {
					"channels": 8,
					"control_group_sizes": [1, 2, 4, 8], // NB: size=1 needs special treatment of waveforms because one AWG unit drives 2 channels
					"latency": 300		// FIXME: check. If latency depends on FW version, several definitions must be present
				},
				"qutech-vsm": {
					"channels": 32,
					"control_group_sizes": [1],
					"latency": 10		// FIXME: check
				},
				"zi-uhfqa": {
					"channels": 9,
					"control_group_sizes": [1],
					"latency": 150		// FIXME: check. FIXME: specify latency if trigger to output, also measurement latency
				}
			},   // instrument_definitions



			// Modes to control instruments. These define which bits are used to control groups of channels
            // and/or get back measurement results.
            // Sub keys for "control_modes":
            // - <key>                          a name which can be referred to from key 'instruments/[]/ref_control_mode'
            // - <key>/control_bits             G groups of B bits:
            //                                  - G defines the 'instrument_definitions/<key>/control_group_sizes' used
            //                                  - B is an ordered list of bits (MSB to LSB) used for the code word
            // - <key>/trigger_bits             vector of bits used to trigger the instrument. Must either be size 1 (common trigger)
            //                                  or size G (separate trigger per group)
            // - <key>/result_bits              future
            // - <key>/data_valid_bits          future
			"control_modes": {
				"awg8-mw-vsm": {						  // ZI_HDAWG8.py::cfg_codeword_protocol() == 'microwave'
					"control_bits": [
						[7,6,5,4,3,2,1,0],                // group 0
						[15,14,13,12,11,10,9,8]           // group 1
					],
					"trigger_bits": [31]
				},
				"awg8-mw-direct-iq": {				      // just I&Q to generate microwave without VSM. FIXME: no official mode yet
					"control_bits": [
						[6,5,4,3,2,1,0],                  // group 0
						[13,12,11,10,9,8,7],              // group 1
						[20,19,18,17,16,15,14],           // group 2
						[27,26,25,24,23,22,21]            // group 4
					],
					"trigger_bits": [31]
				},
				"awg8-flux": {							   // ZI_HDAWG8.py::cfg_codeword_protocol() == 'flux'
                    // NB: please note that internally one AWG unit handles 2 channels, which requires special handling of the waveforms
					"control_bits": [
						[2,1,0],                          // group 0
						[5,4,3],
						[8,7,6],
						[11,10,9],
						[14,13,12],
						[17,16,15],
						[20,19,18],
						[23,22,21]                        // group 7
					],
					"trigger_bits": [31]
				},
				"awg8-flux-vector-8": {				       // single code word for 8 flux channels. FIXME: no official mode yet
					"control_bits": [
						[7,6,5,4,3,2,1,0]     // FIXME: how many bits are available
					],
					"trigger_bits": [31]
				},
				"uhfqa-9ch": {
					"control_bits": [[17],[18],[19],[20],[21],[22],[23],[24],[25]],    // group[0:8]
					"trigger_bits": [16],
					"result_bits": [[1],[2],[3],[4],[5],[6],[7],[8],[9]],              // group[0:8]
					"data_valid_bits": [0]
				},
				"vsm-32ch":{
					"control_bits": [
						[0],[1],[2],[3],[4],[5],[6],[7],                      // group[0:7]
						[8],[9],[10],[11],[12],[13],[14],[15],                // group[8:15]
						[16],[17],[18],[19],[20],[21],[22],[23],              // group[16:23]
						[24],[25],[26],[27],[28],[28],[30],[31]               // group[24:31]
					],
					"trigger_bits": []				                         // no trigger
				}
			},   // control_modes



            // Signal library that gate definitions can refer to.
            // Sub keys for "signals":
            // - <key>                      a name which can be referred to from key 'instructions/<>/cc/ref_signal'
            // - <key>/*                    see 'instructions/<>/cc/signal'
            // NB: our JSON library does not yet support JSON pointers like:
            // "signal": {"$ref": "#/hardware_settings/eqasm_backend_cc/signals/single-qubit-mw"}
            "signals": {
                "single-qubit-mw": [
                    {   "type": "mw",
                        "operand_idx": 0,
                        "value": [
                            "{gateName}-{instrumentName}:{instrumentGroup}-gi",
                            "{gateName}-{instrumentName}:{instrumentGroup}-gq",
                            "{gateName}-{instrumentName}:{instrumentGroup}-di",
                            "{gateName}-{instrumentName}:{instrumentGroup}-dq"
                        ]
                    },
                    {   "type": "switch",
                        "operand_idx": 0,
                        "value": ["dummy"]                                  // NB: no actual signal is generated
                    }
                ],
                "two-qubit-flux": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 1,                                   // target
                        "value": ["flux-1-{qubit}"]
                    }
                    // FIXME: CZ(a,b) and CZ(a,c) requires different waveforms on a
                ]
            },  // signals



			// Instruments used in this setup, their configuration and connectivity.
			"instruments": [
				// readout.
                // FIXME: must match 'resources/meas_units' if resource constraint scheduler is used
				{
					"name": "ro_0",
                    "qubits": [[6], [11], [], [], [], [], [], [], []],
                    "signal_type": "measure",
					"ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 0,
						"io_module": "CC-CONN-DIO"
					}
				},
				{
					"name": "ro_1",
                    "qubits": [[0], [1], [2], [3], [7], [8], [12], [13], [15]],
                    "signal_type": "measure",
					"ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 1,
						"io_module": "CC-CONN-DIO"
					}
				},
				{
					"name": "ro_2",
                    "qubits": [[4], [5], [9], [10], [14], [16], [], [], []],
                    "signal_type": "measure",
					"ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 2,
						"io_module": "CC-CONN-DIO"
					}
				},

				// microwave.
                // FIXME: must match 'resources/qwgs' if resource constraint scheduler is used
				{
					"name": "mw_0",
                    "qubits": [                                             // data qubits:
                        [2, 8, 14],                                         // [freq L]
                        [1, 4, 6, 10, 12, 15]                               // [freq H]
                    ],
                    "signal_type": "mw",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-vsm",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 3,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				},
				{
					"name": "mw_1",
                    "qubits": [                                             // ancilla qubits:
                        [0, 5, 9, 13],                                      // [freq Mg]
                        [3, 7, 11, 16]                                      // [freq My]
                    ],
                    "signal_type": "mw",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-vsm",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 4,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				},

				// VSM
				{
					"name": "vsm_0",
                    "qubits": [
                        [2], [8], [14], [],  [], [], [], [],                // [freq L]
                        [1], [4], [6], [10], [12], [15], [], [],            // [freq H]
                        [0], [5], [9], [13], [], [], [], [],                // [freq Mg]
                        [3], [7], [11], [16], [], [], [], []                // [freq My]
                    ],
                    "signal_type": "switch",
					"ref_instrument_definition": "qutech-vsm",
                    "ref_control_mode": "vsm-32ch",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 5,
						"io_module": "cc-conn-vsm"
					}
				},

				// flux
				{
					"name": "flux_0",
                    "qubits": [[0], [1], [2], [3], [4], [5], [6], [7]],
                    "signal_type": "flux",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
//                    "ref_control_mode": "awg8-flux-vector-8",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 6,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				},
				{
					"name": "flux_1",
                    "qubits": [[8], [9], [10], [11], [12], [13], [14], [15]],
                    "signal_type": "flux",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
//                    "ref_control_mode": "awg8-flux-vector-8",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 7,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				},
				{
					"name": "flux_2",
                    "qubits": [[16], [], [], [], [], [], [], []],
                    "signal_type": "flux",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
//                    "ref_control_mode": "awg8-flux-vector-8",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 8,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				}
			] // instruments
		}
	},



	// extracted from PyqQED_py3 'generate_CCL_cfg.py'
  	"gate_decomposition": {
        "x %0": ["rx180 %0"],
        "y %0": ["ry180 %0"],
        "roty90 %0": ["ry90 %0"],
        "cnot %0 %1": ["ry90 %1", "cz %0 %1", "ry90 %1"],

        // To support other forms of writing the same gates
        "x180 %0": ["rx180 %0"],
        "y180 %0": ["ry180 %0"],
        "y90 %0": ["ry90 %0"],
        "x90 %0": ["rx90 %0"],
        "my90 %0": ["rym90 %0"],
        "mx90 %0": ["rxm90 %0"],

        // Clifford decomposition per Epstein et al. Phys. Rev. A 89, 062321 (2014)
        "cl_0 %0": ["i %0"],
        "cl_1 %0": ["ry90 %0", "rx90 %0"],
        "cl_2 %0": ["rxm90 %0", "rym90 %0"],
        "cl_3 %0": ["rx180 %0"],
        "cl_4 %0": ["rym90 %0", "rxm90 %0"],
        "cl_5 %0": ["rx90 %0", "rym90 %0"],
        "cl_6 %0": ["ry180 %0"],
        "cl_7 %0": ["rym90 %0", "rx90 %0"],
        "cl_8 %0": ["rx90 %0", "ry90 %0"],
        "cl_9 %0": ["rx180 %0", "ry180 %0"],
        "cl_10 %0": ["ry90 %0", "rxm90 %0"],
        "cl_11 %0": ["rxm90 %0", "ry90 %0"],
        "cl_12 %0": ["ry90 %0", "rx180 %0"],
        "cl_13 %0": ["rxm90 %0"],
        "cl_14 %0": ["rx90 %0", "rym90 %0", "rxm90 %0"],
        "cl_15 %0": ["rym90 %0"],
        "cl_16 %0": ["rx90 %0"],
        "cl_17 %0": ["rx90 %0", "ry90 %0", "rx90 %0"],
        "cl_18 %0": ["rym90 %0", "rx180 %0"],
        "cl_19 %0": ["rx90 %0", "ry180 %0"],
        "cl_20 %0": ["rx90 %0", "rym90 %0", "rx90 %0"],
        "cl_21 %0": ["ry90 %0"],
        "cl_22 %0": ["rxm90 %0", "ry180 %0"],
        "cl_23 %0": ["rx90 %0", "ry90 %0", "rxm90 %0"],

        // CC additions
        "cnot_park1 %0 %1 %2": ["ry90 %1", "cz %0 %1", "park_cz %2", "ry90 %1"],
        "cnot_park2 %0 %1 %2": ["ry90 %1", "cz_park %0 %1 %2", "ry90 %1"],
        "cz_park1 %0 %1 %2": ["cz %0 %1", "park_cz %2"]
  	},



    // User defined instruction set.
    // Sub keys for "instructions", standard OpenQL:
    // - <key>                          name for the instruction (NB: supports several naming schemes)
    // - <key>/duration                 duration in [ns]
    // - <key>/latency                  optional instruction latency (effect unclear)
    // - <key>/matrix                   required, but generally does not contain useful information
    //
    // The cc-light scheduler that we currently use requires the following sub keys:
    // - <key>/cc_light_instr
    // - <key>/type
    // Sub keys for "instructions", CC additions:
    // - <key>/cc/signal/type
    // - <key>/cc/signal/operand_idx
    // - <key>/cc/signal/value
    //                                  Supports the following macro expansions:
    //                                  * {gateName}
    //                                  * {instrumentName}
    //                                  * {instrumentGroup}
    //                                  * {qubit}
    // - <key>/cc/ref_signal            reference to key 'signals/<value> instead of '<key>/cc/signal'
    //
    //
    // FIXME: allow AWG8 setPrecompClear with wave

	"instructions": {
        // based on PyqQED_py3 'mw_lutman.py' and 'generate_CCL_cfg.py':
        // FIXME: also add conditional single qubit gates?
        "i": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "i",
            "cc": {
//                "ref_signal": "single-qubit-mw",
                "signal": [],   // no signal, to prevent conflicts with other gates (NB: will output nothing because VSM stays off)
                "static_codeword_override": [0]
            }
        },
        "rx180": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "x",
            "cc": {
                "ref_signal": "single-qubit-mw",    // NB: reference, instead of defining "signal" here
                "static_codeword_override": [1]
            }
        },
        "ry180": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "y",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "rx90": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "x90",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "ry90": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "y90",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "rxm90": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "xm90",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "rym90": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "ym90",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },

        // CZ should handle:
        // https://github.com/QuTech-Delft/OpenQL/issues/166
        // https://github.com/QuTech-Delft/OpenQL/issues/180
        "cz": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "cz",
            "cc": {
                "ref_signal": "two-qubit-flux",     // NB: reference, instead of defining "signal" here
                "static_codeword_override": [1,1]   // FIXME
            }
        },
        "cz_park": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "cz",
            "cc": {
                "signal": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 1,                                   // target
                        "value": ["flux-1-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 2,                                   // park
                        "value": ["park_cz-{qubit}"]
                    }
                ],
                "static_codeword_override": [0,0,0]   // FIXME
            }
        },

		// additions from 'CC-software-implementation.docx'
		// flux pulses, see issue #176:
		"park_cz" : { // park signal with same length as cz gate
			"duration" : 40,
			"cc_light_instr": "park_cz",
			"type": "measure",		// FIXME
			"cc": {
				"signal": [
					{	"type": "flux",
						"operand_idx": 0,
						"value": ["park_cz-{qubit}"]
					}
				],
                "static_codeword_override": [0]   // FIXME
			}
		},

		"park_measure" : { // park signal with same length as measurement
			"duration" : 300,
			"cc": {
				"signal": [
					{	"type": "flux",
						"operand_idx": 0,
						"value": ["park_measure-{qubit}"]
					}
				],
                "static_codeword_override": [0]   // FIXME
			}
		},


		// based on PyqQED_py3 'generate_CCL_cfg.py':
		"prepz": {
			"duration": 200000,
			"type": "readout",
			"cc_light_instr": "prepz",
            "cc": {
//                "ref_signal": "single-qubit-mw"
                "signal": [],    // FIXME: no signal, pycQED::test_multi_qubit_oql_CC.py fails otherwise on scheduling issues
                "static_codeword_override": [0]   // FIXME
            }
		},

		"measure": {
			"duration": 600,
			"type": "readout",
			"cc_light_instr": "measz",
			"cc": {
				"signal": [
					{	"type": "measure",
						"operand_idx": 0,
						"value": ["dummy"]			// Future extension: specify output and weight, and generate code word
					}
				],
                "static_codeword_override": [0]   // FIXME
			}
		},

        // additions for pycQED::test_single_qubit_oql_CC.py
        // FIXME: contents untested
        "square": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "square",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "spec": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "spec",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "rx12": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "rx12",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        // cw_00 .. cw_31
        "cw_00": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_00",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "cw_01": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_01",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [1]
            }
        },
        "cw_02": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_02",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "cw_03": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_03",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "cw_04": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_04",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "cw_05": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_05",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "cw_06": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_06",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },
        "cw_07": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_07",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [7]
            }
        },
        "cw_08": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_08",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [8]
            }
        },
        "cw_09": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_09",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [9]
            }
        },
        "cw_10": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_10",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [10]
            }
        },
        "cw_11": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_11",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [11]
            }
        },
        "cw_12": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_12",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [12]
            }
        },
        "cw_13": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_13",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [13]
            }
        },
        "cw_14": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_14",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [14]
            }
        },
        "cw_15": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_15",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [15]
            }
        },
        "cw_16": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_16",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [16]
            }
        },
        "cw_17": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_17",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [17]
            }
        },
        "cw_18": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_18",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [18]
            }
        },
        "cw_19": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_109",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [19]
            }
        },
        "cw_20": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_20",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [20]
            }
        },
        "cw_21": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_21",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [21]
            }
        },
        "cw_22": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_22",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [22]
            }
        },
        "cw_23": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_23",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [23]
            }
        },
        "cw_24": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_24",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [24]
            }
        },
        "cw_25": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_25",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [25]
            }
        },
        "cw_26": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_26",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [26]
            }
        },
        "cw_27": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_27",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [27]
            }
        },
        "cw_28": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_28",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [28]
            }
        },
        "cw_29": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_29",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [29]
            }
        },
        "cw_30": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_30",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [30]
            }
        },
        "cw_31": {
            "duration": 20,
            "type": "mw",
            "cc_light_instr": "cw_31",
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [31]
            }
        },

        // fl_cw_00 .. fl_cw_07
        "fl_cw_00": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "fl_cw_00",
            "cc": {
                "ref_signal": "two-qubit-flux", // FIXME
                "static_codeword_override": [0]
            }
        },
        "fl_cw_01": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "fl_cw_01",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "fl_cw_02": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "fl_cw_02",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "fl_cw_03": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "fl_cw_03",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "fl_cw_04": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "fl_cw_04",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "fl_cw_05": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "fl_cw_05",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "fl_cw_06": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "fl_cw_06",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [6]
            }
        },
        "fl_cw_07": {
            "duration": 40,
            "type": "flux",
            "cc_light_instr": "fl_cw_07",
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [7]
            }
        }

    }   // end of "instructions"
}

