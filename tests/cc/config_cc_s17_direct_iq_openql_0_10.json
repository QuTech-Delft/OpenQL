// This is a generated file, do NOT EDIT
//
// Generated by generate_CC_cfg_modular.py on 2022-04-25 13:54:44.450008.
// 
// Parameters were:
// out_filename        = '/Volumes/Data/shared/GIT/PycQED_py3/pycqed/tests/openql/test_output_cc/config_cc_s17_direct_iq_openql_0_10.json'
// mw_pulse_duration   = 20
// flux_pulse_duration = 40
// ro_duration         = 800
// init_duration       = 200000
// in_filename         = 'config/config_cc_s17_direct_iq.json.in'  

// File:    config_cc_s17_direct_iq.json.in
// notes:   requires OpenQL >= 0.10.2
//          see https://openql.readthedocs.io/en/latest/gen/reference_architectures.html#qutech-central-controller for documentation of this file
// author: 	Wouter Vlothuizen e.a.

{
	"eqasm_compiler" : "cc",

	"hardware_settings": {
        "qubit_number": 17,
        "creg_number": 32,
        "breg_number": 32,
		"cycle_time" : 20,        // in [ns]

        "eqasm_backend_cc": {

            // Instruments used in this setup, their configuration and connectivity.
            "instruments": [
                // readout.
                {
                    "name": "ro_0",
                    "qubits": [[1], [4], [5], [8], [10], [7], [11], [14], [15]],
                    "signal_type": "measure",
                    "ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
                    "controller": {
                        "name": "cc",
                        "slot": 2,
                        "io_module": "CC-CONN-DIO"
                    }
                },
                {
                    "name": "ro_1",
                    "qubits": [[0], [2], [3], [6], [9], [12], [], [], []],
                    "signal_type": "measure",
                    "ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
                    "controller": {
                        "name": "cc",
                        "slot": 4,
                        "io_module": "CC-CONN-DIO"
                    }
                },
                {
                    "name": "ro_2",
                    "qubits": [[13], [16], [], [], [], [], [], [], []],
                    "signal_type": "measure",
                    "ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
                    "controller": {
                        "name": "cc",
                        "slot": 5,
                        "io_module": "CC-CONN-DIO"
                    }
                },

                // microwave.
                {
                    "name": "mw_0",
                    "qubits": [                                             // data qubits:
                        [8],
                        [9],
                        [14],
                        [15]
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",
                        "slot": 0,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "mw_1",
                    "qubits": [                                             // ancilla qubits:
                        [11],
                        [10],
                        [12],
                        []
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",
                        "slot": 1,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "mw_2",
                    "qubits": [                                             // data qubits:
                        [0],
                        [1],
                        [2],
                        [3]
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",
                        "slot": 6,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "mw_3",
                    "qubits": [                                             // ancilla qubits:
                        [4],
                        [5],
                        [6],
                        [7]
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",
                        "slot": 7,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "mw_4",
                    "qubits": [                                             // ancilla qubits:
                        [13],
                        [16],
                        [],
                        []
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",
                        "slot": 8,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                // flux
                {
                    "name": "flux_0",
                    "qubits": [[8], [9], [10], [11], [12], [13], [14], [15]],
                    "signal_type": "flux",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
                    "controller": {
                        "name": "cc",
                        "slot": 3,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "flux_1",
                    "qubits": [[0], [1], [2], [3], [4], [5], [6], [7]],
                    "signal_type": "flux",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
                    "controller": {
                        "name": "cc",
                        "slot": 9,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },
                {
                    "name": "flux_2",
                    "qubits": [[16], [], [], [], [], [], [], []],
                    "signal_type": "flux",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
                    "controller": {
                        "name": "cc",
                        "slot": 10,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                }
            ], // instruments

//--- start of include file '/Volumes/Data/shared/GIT/PycQED_py3/pycqed/measurement/openql_experiments/config/common_eqasm_backend_cc.json.in' ---
// File:    common_eqasm_backend_cc.json.in
// notes:   this file specifies commonalities between different setups for key "eqasm_backend_cc"
//          see https://openql.readthedocs.io/en/latest/gen/reference_architectures.html#qutech-central-controller for documentation of this file
// author: 	Wouter Vlothuizen e.a.


//{
//	"hardware_settings": {
//		"eqasm_backend_cc": {
			"instrument_definitions": {
				"qutech-qwg": {
					"channels": 4,
					"control_group_sizes": [1, 4]
				},
				"zi-hdawg": {
					"channels": 8,
					"control_group_sizes": [1, 2, 4, 8] // NB: size=1 needs special treatment of waveforms because one AWG unit drives 2 channels
				},
				"qutech-vsm": {
					"channels": 32,
					"control_group_sizes": [1]
				},
				"zi-uhfqa": {
					"channels": 9,
					"control_group_sizes": [1]
				}
			},   // instrument_definitions


			"control_modes": {
				"awg8-mw-vsm-hack": {					  // ZI_HDAWG8.py::cfg_codeword_protocol() == 'microwave'. Old hack to skip DIO[8]. Doesn't support QWG
					"control_bits": [
						[7,6,5,4,3,2,1,0],                // group 0
						[16,15,14,13,12,11,10,9]          // group 1
					],
					"trigger_bits": [31]
				},
				"awg8-mw-vsm": {						  // the way the mode above should have been and support for QWG
					"control_bits": [
						[7,6,5,4,3,2,1,0],                // group 0
                        [23,22,21,20,19,18,17,16]         // group 1
					],
					"trigger_bits": [31,15]
				},
				"awg8-mw-direct-iq": {				      // just I&Q to generate microwave without VSM. HDAWG8: "new_novsm_microwave"
					"control_bits": [
						[6,5,4,3,2,1,0],                  // group 0
						[13,12,11,10,9,8,7],              // group 1
						[22,21,20,19,18,17,16],           // group 2. NB: starts at bit 16 so twin-QWG can also support it
						[29,28,27,26,25,24,23]            // group 4
					],
					"trigger_bits": [31,15]
				},
				"awg8-flux": {							   // ZI_HDAWG8.py::cfg_codeword_protocol() == 'flux'
                    // NB: please note that internally one AWG unit handles 2 channels, which requires special handling of the waveforms
					"control_bits": [
						[2,1,0],                          // group 0
						[5,4,3],
						[8,7,6],
						[11,10,9],
						[18,17,16],                       // group 4. NB: starts at bit 16 so twin-QWG can also support it
						[21,20,19],
						[24,23,22],
						[27,26,25]                        // group 7
					],
					"trigger_bits": [31,15]
				},
				"awg8-flux-vector-8": {				       // single code word for 8 flux channels. FIXME: no official mode yet
					"control_bits": [
						[7,6,5,4,3,2,1,0]     // FIXME: how many bits are available
					],
					"trigger_bits": [31]
				},
				"uhfqa-9ch": {
					"control_bits": [[17],[18],[19],[20],[21],[22],[23],[24],[25]],    // group[0:8]
					"trigger_bits": [16],
					"result_bits": [[1],[2],[3],[4],[5],[6],[7],[8],[9]],              // group[0:8]
					"data_valid_bits": [0]
				},
				"vsm-32ch":{
					"control_bits": [
						[0],[1],[2],[3],[4],[5],[6],[7],                      // group[0:7]
						[8],[9],[10],[11],[12],[13],[14],[15],                // group[8:15]
						[16],[17],[18],[19],[20],[21],[22],[23],              // group[16:23]
						[24],[25],[26],[27],[28],[28],[30],[31]               // group[24:31]
					],
					"trigger_bits": []				                         // no trigger
				}
			},   // control_modes


            "signals": {
                "single-qubit-mw": [
                    {   "type": "mw",
                        "operand_idx": 0,
                        "value": [
                            "{gateName}-{instrumentName}:{instrumentGroup}-i",
                            "{gateName}-{instrumentName}:{instrumentGroup}-q"
                        ]
                    }
                ],
                "two-qubit-flux": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 1,                                   // target
                        "value": ["flux-1-{qubit}"]
                    }
                ],
                "single-qubit-flux": [
                    {   "type": "flux",
                        "operand_idx": 0,
                        "value": ["flux-0-{qubit}"]
                    }
                ]
            }  // signals

//		}  // eqasm_backend_cc
//	},  // hardware_settings
//}
//--- end of include file '/Volumes/Data/shared/GIT/PycQED_py3/pycqed/measurement/openql_experiments/config/common_eqasm_backend_cc.json.in' ---

		}  // eqasm_backend_cc
	},  // hardware_settings

    "gate_decomposition": {
//--- start of include file '/Volumes/Data/shared/GIT/PycQED_py3/pycqed/measurement/openql_experiments/config/common_gate_decomposition.json.in' ---
// File:    common_gate_decomposition.json.in
// notes:   this file specifies commonalities between different setups for key "gate_decomposition"
//          see https://openql.readthedocs.io/en/latest/gen/reference_architectures.html#qutech-central-controller for documentation of this file
// author: 	Wouter Vlothuizen e.a.

//{
//  "gate_decomposition": {
	    // extracted from PyqQED_py3 'generate_CCL_cfg.py'
        "x %0": ["rx180 %0"],
        "y %0": ["ry180 %0"],
        "roty90 %0": ["ry90 %0"],

        // To support other forms of writing the same gates
        "x180 %0": ["rx180 %0"],
        "y180 %0": ["ry180 %0"],
        "y90 %0": ["ry90 %0"],
        "x90 %0": ["rx90 %0"],
        "my90 %0": ["rym90 %0"],
        "mx90 %0": ["rxm90 %0"],

        // Clifford decomposition per Epstein et al. Phys. Rev. A 89, 062321 (2014)
        // FIXME: only used by single_qubit_oql::randomized_benchmarking()
        "cl_0 %0": ["i %0"],
        "cl_1 %0": ["ry90 %0", "rx90 %0"],
        "cl_2 %0": ["rxm90 %0", "rym90 %0"],
        "cl_3 %0": ["rx180 %0"],
        "cl_4 %0": ["rym90 %0", "rxm90 %0"],
        "cl_5 %0": ["rx90 %0", "rym90 %0"],
        "cl_6 %0": ["ry180 %0"],
        "cl_7 %0": ["rym90 %0", "rx90 %0"],
        "cl_8 %0": ["rx90 %0", "ry90 %0"],
        "cl_9 %0": ["rx180 %0", "ry180 %0"],
        "cl_10 %0": ["ry90 %0", "rxm90 %0"],
        "cl_11 %0": ["rxm90 %0", "ry90 %0"],
        "cl_12 %0": ["ry90 %0", "rx180 %0"],
        "cl_13 %0": ["rxm90 %0"],
        "cl_14 %0": ["rx90 %0", "rym90 %0", "rxm90 %0"],
        "cl_15 %0": ["rym90 %0"],
        "cl_16 %0": ["rx90 %0"],
        "cl_17 %0": ["rx90 %0", "ry90 %0", "rx90 %0"],
        "cl_18 %0": ["rym90 %0", "rx180 %0"],
        "cl_19 %0": ["rx90 %0", "ry180 %0"],
        "cl_20 %0": ["rx90 %0", "rym90 %0", "rx90 %0"],
        "cl_21 %0": ["ry90 %0"],
        "cl_22 %0": ["rxm90 %0", "ry180 %0"],
        "cl_23 %0": ["rx90 %0", "ry90 %0", "rxm90 %0"],

        // feedback
        "measure_fb %0": ["measure %0", "_wait_uhfqa %0", "_dist_dsm %0", "_wait_dsm %0"]

//  },  // gate_decomposition
//}
//--- end of include file '/Volumes/Data/shared/GIT/PycQED_py3/pycqed/measurement/openql_experiments/config/common_gate_decomposition.json.in' ---

        // NB: is is not possible to decompose 'new style' decompositions into these 'legacy'
        // decompositions. Trying so will result in: "the duration of the schedule of the decomposition
        // (18446744073709551615) cannot be longer than the duration of the to-be-decomposed instruction (2)"
        // Since this is not easily solved and the new system is far better anyway (although slightly more verbose)
        // we won't solve that.

//        ,

        // gate decompositions for S17, using new CZ helpers
//        "cz q8,q10":   ["_cz_sw_ne_park q8,q10,q11"],
//        "cz q10,q8":   ["_cz_sw_ne_park q8,q10,q11"],
//        "cz q8,q11":   ["_cz_se_nw_park q8,q11,q10"],
//        "cz q11,q8":   ["_cz_se_nw_park q8,q11,q10"],
//        "cz q11,q14":  ["_cz_sw_ne_park q11,q14,q15"],
//        "cz q14,q11":  ["_cz_sw_ne_park q11,q14,q15"],
//        "cz q10,q14":  ["_cz_se_nw q10,q14"],
//        "cz q14,q10":  ["_cz_se_nw q10,q14"],
//        "cz q9,q11":   ["_cz_sw_ne_park q9,q11,q12"],
//        "cz q11,q9":   ["_cz_sw_ne_park q9,q11,q12"],
//        "cz q9,q12":   ["_cz_se_nw_park q9,q12,q11"],
//        "cz q12,q9":   ["_cz_se_nw_park q9,q12,q11"],
//        "cz q11,q15":  ["_cz_se_nw_park q11,q15,q14"],
//        "cz q15,q11":  ["_cz_se_nw_park q11,q15,q14"],
//        "cz q12,q15":  ["_cz_sw_ne q12,q15"],
//        "cz q15,q12":  ["_cz_sw_ne q12,q15"]


        // FIXME: "flux_dance_*" ripped from config_cc_s17_direct_iq.json.in:
        // - changed "-" to "_" because of new naming conventions
        // - cleanup/rewrite along lines of new CZ helpers
        // - disabled because target instructions must exist

        // 2. flux-dance with hard-coded CZ gates in parallel.
        // Qubits are ordered in sf_cz target, control.

          // FIXME: test for Hani
//        "flux_dance_1 q0": ["barrier q3, q5, q16, q8, q11, q2, q1, q10, q14, q6",
//                            "sf_cz_ne q3", "sf_cz_sw q5", "sf_cz_sw q16", "sf_cz_ne q8", "sf_cz_ne q11", "sf_cz_sw q2",
//                            "sf_park q1", "sf_park q10", "sf_park q14","sf_park q6",
//                            "barrier q3, q5, q16, q8, q11, q2, q1, q10, q14, q6"]

//        "flux_dance_1 q0": ["barrier q3, q5, q16, q8, q11, q2, q1, q10, q14, q6",
//                            "sf_cz_ne q3", "sf_cz_sw q5", "sf_cz_sw q16", "sf_cz_ne q8", "sf_cz_ne q11", "sf_cz_sw q2",
//                            "sf_park q1", "sf_park q10", "sf_park q14","sf_park q6",
//                            "barrier q3, q5, q16, q8, q11, q2, q1, q10, q14, q6"],
//
//
//        "flux_dance_2 q0": ["barrier q3, q1, q13, q8, q11, q6, q5, q10, q7, q2",
//                            "sf_cz_nw q3", "sf_cz_se q1", "sf_cz_se q13", "sf_cz_nw q8", "sf_cz_nw q11", "sf_cz_se q6",
//                             "sf_park q5", "sf_park q10", "sf_park q7","sf_park q2",
//                             "barrier q3, q1, q13, q8, q11, q6, q5, q10, q7, q2"],
//
//        "flux_dance_3 q0": ["barrier q9, q4, q13, q3, q8, q0, q5, q10, q7, q2",
//                            "sf_cz_se q9", "sf_cz_nw q4", "sf_cz_nw q13", "sf_cz_se q3", "sf_cz_se q8", "sf_cz_nw q0",
//                             "sf_park q5", "sf_park q10", "sf_park q7","sf_park q2",
//                             "barrier q9, q4, q13, q3, q8, q0, q5, q10, q7, q2"],
//
//        "flux_dance_4 q0": ["barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0",
//                            "sf_cz_sw q9", "sf_cz_ne q5", "sf_cz_ne q15", "sf_cz_sw q3", "sf_cz_sw q8", "sf_cz_ne q2",
//                             "sf_park q4", "sf_park q12", "sf_park q7","sf_park q0",
//                             "barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0"],
//
//        "flux_dance_5 q0": ["barrier q12, q1, q13, q7, q10, q4, q8, q3, q5",
//                            "sf_cz_ne q12", "sf_cz_sw q1", "sf_cz_sw q13", "sf_cz_ne q7", "sf_cz_ne q10", "sf_cz_sw q4",
//                             "sf_park q8", "sf_park q3", "sf_park q5",
//                             "barrier q12, q1, q13, q7, q10, q4, q8, q3, q5"],
//
//        "flux_dance_6 q0": ["barrier q15, q12, q7, q2, q16, q10, q8, q3, q6, q14",
//                            "sf_cz_nw q15", "sf_cz_se q12", "sf_cz_se q7", "sf_cz_nw q2", "sf_cz_nw q16", "sf_cz_se q10",
//                             "sf_park q8", "sf_park q3", "sf_park q6", "sf_park q14",
//                             "barrier q15, q12, q7, q2, q16, q10, q8, q3, q6, q14"],
//
//        "flux_dance_7 q0": ["barrier q15, q7, q10, q5, q16, q14, q8, q3, q4, q12",
//                            "sf_cz_se q15", "sf_cz_nw q7", "sf_cz_nw q10", "sf_cz_se q5", "sf_cz_se q16", "sf_cz_nw q14",
//                             "sf_park q8", "sf_park q3", "sf_park q4", "sf_park q12",
//                             "barrier q15, q7, q10, q5, q16, q14, q8, q3, q4, q12"],
//
//        "flux_dance_8 q0": ["barrier q7, q6, q13, q10, q14, q0, q8, q3, q2",
//                            "sf_cz_sw q7", "sf_cz_ne q6", "sf_cz_ne q13", "sf_cz_sw q10", "sf_cz_sw q14", "sf_cz_ne q0",
//                             "sf_park q8", "sf_park q3", "sf_park q2",
//                             "barrier q7, q6, q13, q10, q14, q0, q8, q3, q2"],
//
//
//        // // // Qubits are ordered in sf_cz target, control.
//        "flux_dance_1_refocus q0": ["barrier q3, q5, q16, q8, q11, q2, q1, q10, q14, q6, q0, q7, q15, q13, q12, q4, q9",
//                                    "sf_cz_ne q3", "sf_cz_sw q5","sf_cz_sw q16", "sf_cz_ne q8", "sf_cz_ne q11", "sf_cz_sw q2",
//                                    "sf_park q1", "sf_park q10", "sf_park q14","sf_park q6",
//                                    "cw_01 q0", "cw_01 q15", "cw_01 q13", "cw_01 q4", "cw_01 q9",
//                                    "cw_27 q0", "cw_27 q15", "cw_27 q13", "cw_27 q4", "cw_27 q9",
//                                    "barrier q3, q5, q16, q8, q11, q2, q1, q10, q14, q6, q0, q7, q15, q13, q12, q4, q9"],
//
//        "flux_dance_2_refocus q0": ["barrier q3, q1, q13, q8, q11, q6, q5, q10, q7, q2, q15, q4, q0, q9, q12, q16, q14",
//                                    "sf_cz_nw q3", "sf_cz_se q1","sf_cz_se q13", "sf_cz_nw q8", "sf_cz_nw q11", "sf_cz_se q6",
//                                    "sf_park q5", "sf_park q10", "sf_park q7","  q2",
//                                    "cw_01 q15", "cw_01 q4", "cw_01 q0", "cw_01 q9", "cw_01 q16",
//                                    "cw_27 q15", "cw_27 q4", "cw_27 q0", "cw_27 q9", "cw_27 q16",
//                                    "barrier q3, q1, q13, q8, q11, q6, q5, q10, q7, q2, q15, q4, q0, q9, q12, q16, q14"],
//
//        "flux_dance_3_refocus q0": ["barrier q9, q4, q13, q3, q8, q0, q5, q10, q7, q2, q14, q16, q1, q12, q15, q6, q11",
//                                    "sf_cz_se q9", "sf_cz_nw q4","sf_cz_nw q13", "sf_cz_se q3", "sf_cz_se q8", "sf_cz_nw q0",
//                                    "sf_park q5", "sf_park q10", "sf_park q7","sf_park q2",
//                                    "cw_01 q16", "cw_01 q1", "cw_01 q15", "cw_01 q6", "cw_01 q11",
//                                    "cw_27 q16", "cw_27 q1", "cw_27 q15", "cw_27 q6", "cw_27 q11",
//                                    "barrier q9, q4, q13, q3, q8, q0, q5, q10, q7, q2, q14, q16, q1, q12, q15, q6, q11"],
//
//        "flux_dance_4_refocus q0": ["barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6",
//                                    "sf_cz_sw q9", "sf_cz_ne q5", "sf_cz_ne q15", "sf_cz_sw q3", "sf_cz_sw q8", "sf_cz_ne q2",
//                                    "sf_park q4", "sf_park q12", "sf_park q7","sf_park q0",
//                                    "cw_01 q1", "cw_01 q16", "cw_01 q13", "cw_01 q11", "cw_01 q6",
//                                    "cw_27 q1", "cw_27 q16", "cw_27 q13", "cw_27 q11", "cw_27 q6",
//                                    "barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6"],
//
//        "flux_dance_5_refocus q0": ["barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6",
//                                    "sf_cz_ne q12", "sf_cz_sw q1",
//                                    "sf_cz_sw q13", "sf_cz_ne q7", "sf_cz_ne q10", "sf_cz_sw q4",
//                                     "sf_park q8", "sf_park q3", "sf_park q5",
//                                     "cw_01 q15", "cw_01 q6", "cw_01 q0", "cw_01 q2", "cw_01 q16",
//                                     "cw_27 q15", "cw_27 q6", "cw_27 q0", "cw_27 q2", "cw_27 q16",
//                                     "barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6"],
//
//        "flux_dance_6_refocus q0": ["barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6",
//                                     "sf_cz_nw q15", "sf_cz_se q12",
//                                     "sf_cz_se q7", "sf_cz_nw q2", "sf_cz_nw q16", "sf_cz_se q10",
//                                     "sf_park q8", "sf_park q3", "sf_park q6", "sf_park q14",
//                                     "cw_01 q1", "cw_01 q5", "cw_01 q4", "cw_01 q13", "cw_01 q0",
//                                     "cw_27 q1", "cw_27 q5", "cw_27 q4", "cw_27 q13", "cw_27 q0",
//                                     "barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6"],
//
//        "flux_dance_7_refocus q0": ["barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6",
//                                     "sf_cz_se q15", "sf_cz_nw q7",
//                                     "sf_cz_nw q10", "sf_cz_se q5", "sf_cz_se q16", "sf_cz_nw q14",
//                                     "sf_park q8", "sf_park q3", "sf_park q4", "sf_park q12",
//                                     "cw_01 q1", "cw_01 q13", "cw_01 q6", "cw_01 q2", "cw_01 q0",
//                                     "cw_27 q1", "cw_27 q13", "cw_27 q6", "cw_27 q2", "cw_27 q0",
//                                     "barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6"],
//
//        "flux_dance_8_refocus q0": ["barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6",
//                                     "sf_cz_sw q7", "sf_cz_ne q6",
//                                     "sf_cz_ne q13", "sf_cz_sw q10", "sf_cz_sw q14", "sf_cz_ne q0",
//                                     "sf_park q8", "sf_park q3", "sf_park q2",
//                                     "cw_01 q1", "cw_01 q5", "cw_01 q4", "cw_01 q15", "cw_01 q16",
//                                     "cw_27 q1", "cw_27 q5", "cw_27 q4", "cw_27 q15", "cw_27 q16",
//                                     "barrier q9, q5, q15, q3, q8, q2, q4, q12, q7, q0, q1, q10, q16, q13, q14, q11, q6"]
},  // gate_decomposition

	"instructions": {
//--- start of include file '/Volumes/Data/shared/GIT/PycQED_py3/pycqed/measurement/openql_experiments/config/common_instructions.json.in' ---
// File:    common_instructions.json.in
// notes:   this file specifies commonalities between different setups for key "instructions"
//          see https://openql.readthedocs.io/en/latest/gen/reference_architectures.html#qutech-central-controller for documentation of this file
// author: 	Wouter Vlothuizen e.a.

//{
//	"instructions": {
        //**************************************************************************************************************
        // microwave
        //**************************************************************************************************************

        // based on PyqQED_py3 'generate_CCL_cfg.py':
        "prepz": {
            "duration": 200000,
            "cc": {
                "signal": [],    // NB: no signal
                "static_codeword_override": [0]
            }
        },

        // based on PyqQED_py3 'mw_lutman.py' (matches default_mw_lutmap) and 'generate_CCL_cfg.py':
        // normal gates
        "i": {
            "duration": 20,
            "cc": {
                "signal": [],   // no signal
                "static_codeword_override": [0]
            }
        },
        "rx180": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 180, "phi": 0 }
                    }
                ],
                "static_codeword_override": [1]
            }
        },
        "ry180": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 180, "phi": 90 }
                    }
                ],
                "static_codeword_override": [2]
            }
        },
        "rx90": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 90, "phi": 0 }
                    }
                ],
                "static_codeword_override": [3]
            }
        },
        "ry90": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 90, "phi": 90 }
                    }
                ],
                "static_codeword_override": [4]
            }
        },
        "rxm90": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": -90, "phi": 0 }
                    }
                ],
                "static_codeword_override": [5]
            }
        },
        "rym90": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": -90, "phi": 90 }
                    }
                ],
                "static_codeword_override": [6]
            }
        },
        // FIXME: missing codeword 7

        // spectroscopy gate
        "spec": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "spec"}
                    }
                ],
                "static_codeword_override": [8]
            }
        },

        // pi pulse 2nd excited state
        "rx12": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ef", "theta": 180, "phi": 0 }
                    }
                ],
                "static_codeword_override": [9]
            }
        },


        "square": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "square"}
                    }
                ],
                "static_codeword_override": [10]
            }
        },

        // normal gate
        "rx45": {
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "ge", "theta": 45, "phi": 0 }
                    }
                ],
                "static_codeword_override": [13]
            }
        },



        // RUS: replaces former gate decompositions
        // FIXME: replace signal/value/type with sensible info
        // FIXME: check codewords, fix conflicts, check prototypes
        "rx2theta": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_27"}
                    }
                ],
                "static_codeword_override": [27]
            }
        },
        "rxm2theta": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_28"}
                    }
                ],
                "static_codeword_override": [28]
            }
        },
        "rx2thetaalpha": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_29"}
                    }
                ],
                "static_codeword_override": [29]
            }
        },
        "rx180beta": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_29"}
                    }
                ],
                "static_codeword_override": [29]
            }
        },
        "rx90alpha": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_26"}
                    }
                ],
                "static_codeword_override": [26]
            }
        },
        "rx180alpha2": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_25"}
                    }
                ],
                "static_codeword_override": [25]
            }
        },

        "ry90beta": {
            "prototype": ["Y:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_28"}
                    }
                ],
                "static_codeword_override": [28]
            }
        },
        "rym90alpha": {
            "prototype": ["Y:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_29"}
                    }
                ],
                "static_codeword_override": [29]
            }
        },
        "ry90betapi": {
            "prototype": ["Y:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_30"}
                    }
                ],
                "static_codeword_override": [30]
            }
        },

        "rphi180": {
            "prototype": ["Z:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_27"}
                    }
                ],
                "static_codeword_override": [27]
            }
        },
        "rphi180beta": {
            "prototype": ["Z:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_28"}
                    }
                ],
                "static_codeword_override": [28]
            }
        },
        "rphi180beta2": {
            "prototype": ["Z:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_30"}
                    }
                ],
                "static_codeword_override": [30]
            }
        },
        "rphi180alpha": {
            "prototype": ["Z:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_31"}
                    }
                ],
                "static_codeword_override": [31]
            }
        },
        "rphim2theta": {
            "prototype": ["Z:qubit"],
            "duration": 20,
            "cc": {
                "signal": [
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_28"}
                    }
                ],
                "static_codeword_override": [28]
            }
        },

        // cw_00 .. cw_31
        // FIXME: remove
        // FIXME: codewords overlap with RUS above, which originally used gate decomposition
        // FIXME: remove? Used by multi_qubit_oql.py and single_qubit_oql.py (echo/rabi_frequency/...)
        // ef_rabi_seq() uses codeword range [9, 26]
        "cw_00": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "cw_01": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [1]
            }
        },
        "cw_02": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "cw_03": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "cw_04": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "cw_05": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "cw_06": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },
        "cw_07": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [7]
            }
        },
        "cw_08": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [8]
            }
        },
        "cw_09": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [9]
            }
        },
        "cw_10": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [10]
            }
        },
        "cw_11": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [11]
            }
        },
        "cw_12": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [12]
            }
        },
        "cw_13": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [13]
            }
        },
        "cw_14": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [14]
            }
        },
        "cw_15": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [15]
            }
        },
        "cw_16": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [16]
            }
        },
        "cw_17": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [17]
            }
        },
        "cw_18": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [18]
            }
        },
        "cw_19": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [19]
            }
        },
        "cw_20": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [20]
            }
        },
        "cw_21": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [21]
            }
        },
        "cw_22": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [22]
            }
        },
        "cw_23": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [23]
            }
        },
        "cw_24": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [24]
            }
        },
        "cw_25": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [25]
            }
        },
        "cw_26": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [26]
            }
        },
        "cw_27": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [27]
            }
        },
        "cw_28": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [28]
            }
        },
        "cw_29": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [29]
            }
        },
        "cw_30": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [30]
            }
        },
        "cw_31": {
            "prototype": ["X:qubit"],
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [31]
            }
        },

        //**************************************************************************************************************
        // measure
        //**************************************************************************************************************

        "measure": {
//            "prototype": ["M:qubit"],  FIXME: no prototype, to make convert_old_to_nre infer prototype
            "duration": 800,
            "cc": {
                "signal": [
                    {   "type": "measure",
                        "operand_idx": 0,
                        "value": ["dummy"]          // Future extension: specify output and weight, and generate code word
                    }
                ],
                "static_codeword_override": [0]   // FIXME
            }
        },

        // allow decompositions that prepend measurement with microwave gate
        "_do_measure": {
            "prototype": ["M:qubit"],
            "duration": 800,
            "cc": {
                "signal": [
                    {   "type": "measure",
                        "operand_idx": 0,
                        "value": ["dummy"]          // Future extension: specify output and weight, and generate code word
                    }
                ],
                "static_codeword_override": [0]   // FIXME
            }
        },
        // FIXME: fails if used in conjunction with legacy API
        "_measure": {
            "prototype": ["M:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "_do_measure op(0)"
            }
        },
        // FIXME: test to prefix some measurements with rx12
        "_measure q6": {
            "prototype": ["M:qubit"],
            "duration": 0,
            "decomposition": {
                "into": [
                    "rx12 q[6];",
                    "_do_measure q[6]"
                ]
            }
        },


        //**************************************************************************************************************
        // Parameterized gate decompositions
        // Require OpenQL >= 0.10.5 with passes 'opt.ConstProp' and 'opt.DeadCodeElim' enabled
        //**************************************************************************************************************

        // Parameterized gate decompositions (test)
        "_rx": {
           "prototype": ["X:qubit", "L:int"],
           "duration": 0,
           "decomposition": {
               "into": [  // FIXME: makes no real sense, should match gateset used by QI
                    "if (op(1) < 45) {",
                    "   rx45 op(0)",
                    "} else {",
                    "   rx90 op(0)",
                    "}"
                ]
           }
        },

        // Randomized banchmarking (test)
        // based on TwoQubitClifford::gate_decomposition
        "_test_decompose_2q_clifford": {
           "prototype": ["X:qubit", "X:qubit", "L:int"],
           "duration": 0,
           "decomposition": {
               "into": [
                    "if (op(2) < 576) {",
//                    "   _test_single_qubit_like_gates op(0),op(1),op(2)",
                    "   rx90 op(0)",
                    "} else if (op(2) < 576 + 5184) {",
//                    "   _test_CNOT_like_gates op(0),op(1),op(2)",
                    "   rx90 op(0)",
                    "}" // FIXME: etc
                ]
           }
        },
        "_test_single_qubit_like_gates": {
           "prototype": ["X:qubit", "X:qubit", "L:int"],
           "duration": 0,
           "decomposition": {
               "into": [  // FIXME: currently fails in backend
                ]
           }
        },
        "_test_CNOT_like_gates": {
           "prototype": ["X:qubit", "X:qubit", "L:int"],
           "duration": 0,
           "decomposition": {
               "into": [  // FIXME: currently fails in backend
                ]
           }
        },

        //**************************************************************************************************************
        // flux
        //**************************************************************************************************************

        // helpers for CZ gate decomposition, flux_lutman compatible
        //
        // NB: the '*_park' instructions now use prototype "I:qubit" for the park parameter, which makes the scheduler
        // *ignore* that parameter. This allows for parallel scheduling of multiple instructions that perform the same
        // park, but can also arise in conflicts (signal conflict in the CC backend) if a qubit is both used for parking
        // and another fluxing operation.

        "_cz_sw_ne_park": {
            "prototype": ["Z:qubit", "Z:qubit", "I:qubit"],
            "duration": 40,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "cz",  "which": "SW" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 1,
                        "value": { "type": "idle_z",  "which": "NE" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 2,
                        "value": { "type": "park" }
                    }
                ],
                "static_codeword_override": [3,1,5]
            }
        },
        "_cz_sw_ne": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 40,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "cz",  "which": "SW" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 1,
                        "value": { "type": "idle_z",  "which": "NE" }
                    }
                ],
                "static_codeword_override": [3,1]
            }
        },
        "_cz_se_nw_park": {
            "prototype": ["Z:qubit", "Z:qubit", "I:qubit"],
            "duration": 40,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "cz",  "which": "SE" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 1,
                        "value": { "type": "idle_z",  "which": "NW" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 2,
                        "value": { "type": "park" }
                    }
                ],
                "static_codeword_override": [2,4,5]
            }
        },
        "_cz_se_nw": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 40,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "cz",  "which": "SE" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 1,
                        "value": { "type": "idle_z",  "which": "NW" }
                    }
                ],
                "static_codeword_override": [2,4]
            }
        },
        "_cz_park": {  // NB: fka 'sf_park'
            "prototype": ["Z:qubit"],
            "duration": 40,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "park" }
                    }
                ],
                "static_codeword_override": [5]
            }
        },

        // single qubit flux for calibration (compatible flux lutman)
        "sf_square": {
            "duration": 40,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [6]
            }
        },


        // fl_cw_00 .. fl_cw_07
        // FIXME: deprecated
//        "fl_cw_00": {
//            "duration": 40,
//            "cc": {
//                "ref_signal": "two-qubit-flux",
//                "static_codeword_override": [0]
//            }
//        },
//        "fl_cw_01": {
//            "duration": 40,
//            "cc": {
//                "ref_signal": "two-qubit-flux",
//                "static_codeword_override": [1]
//            }
//        },
//        "fl_cw_02": {
//            "duration": 40,
//            "cc": {
//                "ref_signal": "two-qubit-flux",
//                "static_codeword_override": [2]
//            }
//        },
//        "fl_cw_03": {
//            "duration": 40,
//            "cc": {
//                "ref_signal": "two-qubit-flux",
//                "static_codeword_override": [3]
//            }
//        },
//        "fl_cw_04": {
//            "duration": 40,
//            "cc": {
//                "ref_signal": "two-qubit-flux",
//                "static_codeword_override": [4]
//            }
//        },
//        "fl_cw_05": {
//            "duration": 40,
//            "cc": {
//                "ref_signal": "two-qubit-flux",
//                "static_codeword_override": [5]
//            }
//        },
//        "fl_cw_06": {
//            "duration": 40,
//            "cc": {
//                "ref_signal": "two-qubit-flux",
//                "static_codeword_override": [6]
//            }
//        },
//        "fl_cw_07": {
//            "duration": 40,
//            "cc": {
//                "ref_signal": "two-qubit-flux",
//                "static_codeword_override": [7]
//            }
//        },

        // additions for measurements using real time feedback
		"_wait_uhfqa": {
            "prototype": ["U:qubit"],
            "duration": 720
        },
        "_dist_dsm": {
            "prototype": ["U:qubit"],
			"duration": 20,
			"cc": {
                // although we don't output anything, we still need to associate with the correct measurement instrument & group
				"signal": [
					{
    	                "type": "measure",
						"operand_idx": 0,
						"value": []    // don't generate output signal. This also triggers special behaviour to retrieve measurements in real-time (from OpenQL 0.10.3)
					}
                ]
			}
		},
        "_wait_dsm": {
            "prototype": ["U:qubit"],
            "duration": 280
        },

        // additions for pragma/break
        // Require OpenQL < 0.10.1 (use cQASM afterwards)
        "if_1_break": {
			"duration": 60,
			"cc": {
				"signal": [],
				"pragma": {
                    "break": 1
				}
			}
		},
		"if_0_break": {
			"duration": 60,
			"cc": {
				"signal": [],
				"pragma": {
                    "break": 0
				}
			}
		}

//	},	// end of "instructions"
//--- end of include file '/Volumes/Data/shared/GIT/PycQED_py3/pycqed/measurement/openql_experiments/config/common_instructions.json.in' ---

        ,

        //****************************************************************
        // decompositions, new style, require OpenQL>=0.10.2
        // see https://openql.readthedocs.io/en/latest/gen/reference_configuration.html#instructions-section
        // Should be compatible with API, and cQASM1.2
        //
        // Note that for historical reasons, qubits referred to in the instruction name don't use "[]" (e.g. "q8"),
        // whereas the decomposition/into key requires them (e.g. "q[8]"), because it uses cQASM syntax
        //
        // OpenQL>=0.10.3 allows automatic calculation of decomposition duration if duration=0 is specified
        //****************************************************************


        // was:         "measure_fb %0": ["measure %0", "_wait_uhfqa %0", "_dist_dsm %0", "_wait_dsm %0"],
//        "measure_fb": {
//            "prototype": ["U:qubit", "U:bit"],
//            "duration": 0,
//            "decomposition": {
//                "into": "measure op(0),op(1); _wait_uhfqa op(0); _dist_dsm op(0); _wait_dsm op(0)"
//            }
//        }
//,

        // CZ decompositions for S17, using new CZ helpers
        // Note the use of 'hierarchical gate decomposition' for every 2nd entry
        "cz q8,q10": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "_cz_sw_ne_park q[8],q[10],q[11]"
            }
        },
        "cz q10,q8": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "cz q[8],q[10]"
            }
        },

        "cz q8,q11": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "_cz_se_nw_park q[8],q[11],q[10]"
            }
        },
        "cz q11,q8": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "cz q[8],q[11]"
            }
        },

        "cz q11,q14": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "_cz_sw_ne_park q[11],q[14],q[15]"
            }
        },
        "cz q14,q11": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "cz q[11],q[14]"
            }
        },

        "cz q10,q14": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "_cz_se_nw q[10],q[14]"
            }
        },
        "cz q14,q10": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "cz q[10],q[14]"
            }
        },

        "cz q9,q11": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "_cz_sw_ne_park q[9],q[11],q[12]"
            }
        },
        "cz q11,q9": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "cz q[9],q[11]"
            }
        },

        "cz q9,q12": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "_cz_se_nw_park q[9],q[12],q[11]"
            }
        },
        "cz q12,q9": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "cz q[9],q[12]"
            }
        },

        "cz q11,q15": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "_cz_se_nw_park q[11],q[15],q[14]"
            }
        },
        "cz q15,q11": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "cz q[11],q[15]"
            }
        },

        "cz q12,q15": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "_cz_sw_ne q[12],q[15]"
            }
        },
        "cz q15,q12": {
            "prototype": ["Z:qubit", "Z:qubit"],
            "duration": 0,
            "decomposition": {
                "into": "cz q[12],q[15]"
            }
        },

        // Hierarchical gate decompositions (test)

		// Flux dance decompositions (test)
        "_fluxdance_conflict": {
            "prototype": [],
            "duration": 0,
            "decomposition": {
                "into": "{ cz q[8],q[10] | cz q[9],q[11] }" // FIXME: in custom instruction '_cz_sw_ne_park <Z:qubit> q[8], <Z:qubit> q[10], <I:qubit> q[11]': Signal conflict on instrument='flux_0', group=3, between '{type:idle_z,which:NE}' and '{type:park}'
            }
        },
        "_fluxdance_1": {
            "prototype": [],
            "duration": 0,
            "decomposition": {
                "into": "{ cz q[10],q[8] | cz q[9],q[12] }"  // NB: both CZs park q[11]
            }
        },

        // Refocussing (test)
        // CZ with park and refocus
        "__cz_sw_ne_park_refocus": {
            "prototype": ["Z:qubit", "Z:qubit", "I:qubit"],
            "duration": 40,
            "cc": {
                "signal": [
                    {
                        "type": "flux",
                        "operand_idx": 0,
                        "value": { "type": "cz",  "which": "SW" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 1,
                        "value": { "type": "idle_z",  "which": "NE" }
                    },
                    {
                        "type": "flux",
                        "operand_idx": 2,
                        "value": { "type": "park" }
                    },
                    {
                        "type": "mw",
                        "operand_idx": 0,
                        "value": { "type": "cw_27"}  // FIXME
                    }
                ],
                "static_codeword_override": [3,1,5,27]
            }
        }

        },	// instructions

//--- start of include file '/Volumes/Data/shared/GIT/PycQED_py3/pycqed/measurement/openql_experiments/config/common_keys.json.in' ---
// File:    common_keys.json.in
// notes:   this file specifies commonalities between different setups for key "hardware_settings"
//          see https://openql.readthedocs.io/en/latest/gen/reference_architectures.html#qutech-central-controller for documentation of this file
// author: 	Wouter Vlothuizen e.a.

//{
    // NB: the "topology" is optional since OpenQl 0.9, a warning is issued if it does not exist
    "topology": {
    },

    // NB: the "resources" is optional since OpenQl 0.9, a warning is issued if it does not exist
    "resources": {
    }
//}
//--- end of include file '/Volumes/Data/shared/GIT/PycQED_py3/pycqed/measurement/openql_experiments/config/common_keys.json.in' ---

	}  // hardware_settings
}

