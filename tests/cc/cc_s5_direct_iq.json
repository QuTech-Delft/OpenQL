// do NOT EDIT, generated by generate_CC_cfg.py on 2020-03-25 09:59:18.525156. Parameters were:
//   out_filename        = d:\githubrepos\pycqed_py3\pycqed\measurement\openql_experiments\output_cc_s5_direct_iq\cc_s5_direct_iq.json
//   mw_pulse_duration   = 20
//   flux_pulse_duration = 80
//   ro_duration         = 2000
//   init_duration       = 200000
//   in_filename        = d:\githubrepos\pycqed_py3\pycqed\measurement\openql_experiments\config_cc_s5_direct_iq.json.in
{
	// FIXME: proposed header, not used
	//"file_type": "OpenQL-config",
	//"file_version": "0.3",
	//"min_version_openql": "0.7.1",

	"eqasm_compiler" : "cc",

	"hardware_settings": {
		"qubit_number": 5,
		"cycle_time" : 20,        // in [ns]

		// FIXME: we put this key inside "hardware_settings" for now, but it should preferably be below "backend" or "eqasm_compiler"
		"eqasm_backend_cc": {
			// Immutable properties of instruments.
            // Sub keys for "instrument_definitions":
            // - <key>                          a name which can be referred to from key 'instruments/[]/ref_instrument_definition'
            // - <key>/channels                 number of channels (either firmware (UHF-QC) or hardware)
            // - <key>/control_group_sizes      possible arrangements of channels operating as a vector
            // - <key>/latency                  latency from trigger to output in [ns]. FIXME: where do we account for other latencies
			// FIXME: introduce 'controller_definitions' for CC and friends?
			"instrument_definitions": {
				"qutech-qwg": {
					"channels": 4,
					"control_group_sizes": [1, 4],
					"latency": 50		// FIXME: check
				},
				"zi-hdawg": {
					"channels": 8,
					"control_group_sizes": [1, 2, 4, 8], // NB: size=1 needs special treatment of waveforms because one AWG unit drives 2 channels
					"latency": 300		// FIXME: check. If latency depends on FW version, several definitions must be present
				},
				"qutech-vsm": {
					"channels": 32,
					"control_group_sizes": [1],
					"latency": 10		// FIXME: check
				},
				"zi-uhfqa": {
					"channels": 9,
					"control_group_sizes": [1],
					"latency": 150		// FIXME: check. FIXME: specify latency if trigger to output, also measurement latency
				}
			},   // instrument_definitions



			// Modes to control instruments. These define which bits are used to control groups of channels
            // and/or get back measurement results.
            // Sub keys for "control_modes":
            // - <key>                          a name which can be referred to from key 'instruments/[]/ref_control_mode'
            // - <key>/control_bits             G groups of B bits:
            //                                  - G defines the 'instrument_definitions/<key>/control_group_sizes' used
            //                                  - B is an ordered list of bits (MSB to LSB) used for the code word
            // - <key>/trigger_bits             vector of bits used to trigger the instrument. Must either be size 1 (common trigger)
            //                                  or size G (separate trigger per group)
            // - <key>/result_bits              future
            // - <key>/data_valid_bits          future
			"control_modes": {
				"awg8-mw-vsm-hack": {					  // ZI_HDAWG8.py::cfg_codeword_protocol() == 'microwave'. Old hack to skip DIO[8]. Doesn't support QWG
					"control_bits": [
						[7,6,5,4,3,2,1,0],                // group 0
						[16,15,14,13,12,11,10,9]          // group 1
					],
					"trigger_bits": [31]
				},
				"awg8-mw-vsm": {						  // the way the mode above should have been and support for QWG
					"control_bits": [
						[7,6,5,4,3,2,1,0],                // group 0
                        [23,22,21,20,19,18,17,16]         // group 1
					],
					"trigger_bits": [31]
				},
				"awg8-mw-direct-iq": {				      // just I&Q to generate microwave without VSM. HDAWG8: "new_novsm_microwave"
					"control_bits": [
						[6,5,4,3,2,1,0],                  // group 0
						[13,12,11,10,9,8,7],              // group 1
						[22,21,20,19,18,17,16],           // group 2. NB: starts at bit 16 so twin-QWG can also support it
						[29,28,27,26,25,24,23]            // group 4
					],
					"trigger_bits": [15,31]   // FIXME: 15 is for dual QWG
				},
				"awg8-flux": {							   // ZI_HDAWG8.py::cfg_codeword_protocol() == 'flux'
                    // NB: please note that internally one AWG unit handles 2 channels, which requires special handling of the waveforms
					"control_bits": [
						[2,1,0],                          // group 0
						[5,4,3],
						[8,7,6],
						[11,10,9],
						[18,17,16],                       // group 4. NB: starts at bit 16 so twin-QWG can also support it
						[21,20,19],
						[24,23,22],
						[27,26,25]                        // group 7
					],
					"trigger_bits": [31]
				},
				"awg8-flux-vector-8": {				       // single code word for 8 flux channels. FIXME: no official mode yet
					"control_bits": [
						[7,6,5,4,3,2,1,0]     // FIXME: how many bits are available
					],
					"trigger_bits": [31]
				},
				"dualqwg-mw-direct-iq": {				  // just I&Q to generate microwave without VSM
					"control_bits": [
						[6,5,4,3,2,1,0],                  // group 0
						[13,12,11,10,9,8,7],              // group 1
						[22,21,20,19,18,17,16],           // group 2. NB: starts at bit 16 so twin-QWG can also support it
						[29,28,27,26,25,24,23]            // group 4
					],
					"trigger_bits": [15,31]
				},
				"uhfqa-9ch": {
					"control_bits": [[17],[18],[19],[20],[21],[22],[23],[24],[25]],    // group[0:8]
					"trigger_bits": [16],
					"result_bits": [[1],[2],[3],[4],[5],[6],[7],[8],[9]],              // group[0:8]
					"data_valid_bits": [0]
				},
				"vsm-32ch":{
					"control_bits": [
						[0],[1],[2],[3],[4],[5],[6],[7],                      // group[0:7]
						[8],[9],[10],[11],[12],[13],[14],[15],                // group[8:15]
						[16],[17],[18],[19],[20],[21],[22],[23],              // group[16:23]
						[24],[25],[26],[27],[28],[28],[30],[31]               // group[24:31]
					],
					"trigger_bits": []				                         // no trigger
				}
			},   // control_modes



            // Signal library that gate definitions can refer to.
            // Sub keys for "signals":
            // - <key>                      a name which can be referred to from key 'instructions/<>/cc/ref_signal'
            // - <key>/*                    see 'instructions/<>/cc/signal'
            // NB: our JSON library does not yet support JSON pointers like:
            // "signal": {"$ref": "#/hardware_settings/eqasm_backend_cc/signals/single-qubit-mw"}
            "signals": {
                "single-qubit-mw": [
                  {     "type": "mw",
                        "operand_idx": 0,
                        "value": [
                            "{gateName}-{instrumentName}:{instrumentGroup}-i",
                            "{gateName}-{instrumentName}:{instrumentGroup}-q"
                        ]
                    }
                ],
                "two-qubit-flux": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 1,                                   // target
                        "value": ["flux-1-{qubit}"]
                    }
                    // FIXME: CZ(a,b) and CZ(a,c) requires different waveforms on a
                ],
                "single-qubit-flux": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    }
                ]
            },  // signals



			// Instruments used in this setup, their configuration and connectivity.
			"instruments": [
				// readout.
                // FIXME: must match 'resources/meas_units' if resource constraint scheduler is used
				{
					"name": "ro_1",
                    "qubits": [[0], [2], [3], [4], [], [], [], [], []],
                    "signal_type": "measure",
					"ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 0,
						"io_module": "CC-CONN-DIO"
					}
				},
                {
                    "name": "ro_2",
                    "qubits": [[1], [], [], [], [], [], [], [], []],
                    "signal_type": "measure",
                    "ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 1,
                        "io_module": "CC-CONN-DIO"
                    }
                },
				// microwave.
                // FIXME: must match 'resources/qwgs' if resource constraint scheduler is used
				{
					"name": "mw_0",
                    "qubits": [                                             // data qubits:
                        [0],
                        [1],
                        [2],
                        [3]
                    ],
                    "signal_type": "mw",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 2,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				},
                {
                    "name": "mw_1",
                    "qubits": [                                             // data qubits:
                        [4],
                        [],
                        [],
                        []
                    ],
                    "signal_type": "mw",
                    "ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-direct-iq",
                    "controller": {
                        "name": "cc",   // FIXME
                        "slot": 3,
                        "io_module": "CC-CONN-DIO-DIFF"
                    }
                },

				// flux
				{
					"name": "flux_0",
                    "qubits": [[0], [1], [2], [3], [4], [], [], []],
                    "signal_type": "flux",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
//                    "ref_control_mode": "awg8-flux-vector-8",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 4,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				}
			] // instruments
		}
	},



	// extracted from PyqQED_py3 'generate_CCL_cfg.py'
  	"gate_decomposition": {
        // necessary to support measz cQASM operation, using measure operation
        "measz %0": ["measure %0"],

        // gate decompositions for quantum inspire starmon-5
        "x %0": ["rx180 %0"],
        "y %0": ["ry180 %0"],
        "h %0": ["ry90 %0", "ry180 %0"],
        "z %0": ["rx180 %0","ry180 %0"],

        "t %0": ["ry90 %0","rx45 %0","rym90 %0"],
        "tdag %0": ["ry90 %0","rxm45 %0","rym90 %0"],

        "s %0": ["ry90 %0","rx90 %0","rym90 %0"],
        "sdag %0": ["ry90 %0","rxm90 %0","rym90 %0"],

        "cnot %0 %1": ["rym90 %1", "cz %0 %1", "ry90 %1"],

        "cz q0 q2": ["barrier q0,q2", "sf_cz_se q0", "sf_cz_nw q2", "barrier q0,q2"],
        "cz q2 q0": ["barrier q0,q2", "sf_cz_se q0", "sf_cz_nw q2", "barrier q0,q2"],

        "cz q1 q2": ["barrier q1,q2", "sf_cz_sw q1", "sf_cz_ne q2", "barrier q1,q2"],
        "cz q2 q1": ["barrier q1,q2", "sf_cz_sw q1", "sf_cz_ne q2", "barrier q1,q2"],

        "cz q3 q2": ["barrier q2,q3,q4", "sf_cz_sw q2", "sf_cz_ne q3", "sf_park q4", "barrier q2,q3,q4"],
        "cz q2 q3": ["barrier q2,q3,q4", "sf_cz_sw q2", "sf_cz_ne q3", "sf_park q4", "barrier q2,q3,q4"],

        "cz q4 q2": ["barrier q2,q3,q4", "sf_cz_se q2", "sf_cz_nw q4", "sf_park q3", "barrier q2,q3,q4"],
        "cz q2 q4": ["barrier q2,q3,q4", "sf_cz_se q2", "sf_cz_nw q4", "sf_park q3", "barrier q2,q3,q4"],

        // To support other forms of writing the same gates
        "x180 %0": ["rx180 %0"],
        "y180 %0": ["ry180 %0"],
        "y90 %0": ["ry90 %0"],
        "x90 %0": ["rx90 %0"],
        "ym90 %0": ["rym90 %0"],
        "xm90 %0": ["rxm90 %0"],

        // Clifford decomposition per Epstein et al. Phys. Rev. A 89, 062321 (2014)
        "cl_0 %0": ["i %0"],
        "cl_1 %0": ["ry90 %0", "rx90 %0"],
        "cl_2 %0": ["rxm90 %0", "rym90 %0"],
        "cl_3 %0": ["rx180 %0"],
        "cl_4 %0": ["rym90 %0", "rxm90 %0"],
        "cl_5 %0": ["rx90 %0", "rym90 %0"],
        "cl_6 %0": ["ry180 %0"],
        "cl_7 %0": ["rym90 %0", "rx90 %0"],
        "cl_8 %0": ["rx90 %0", "ry90 %0"],
        "cl_9 %0": ["rx180 %0", "ry180 %0"],
        "cl_10 %0": ["ry90 %0", "rxm90 %0"],
        "cl_11 %0": ["rxm90 %0", "ry90 %0"],
        "cl_12 %0": ["ry90 %0", "rx180 %0"],
        "cl_13 %0": ["rxm90 %0"],
        "cl_14 %0": ["rx90 %0", "rym90 %0", "rxm90 %0"],
        "cl_15 %0": ["rym90 %0"],
        "cl_16 %0": ["rx90 %0"],
        "cl_17 %0": ["rx90 %0", "ry90 %0", "rx90 %0"],
        "cl_18 %0": ["rym90 %0", "rx180 %0"],
        "cl_19 %0": ["rx90 %0", "ry180 %0"],
        "cl_20 %0": ["rx90 %0", "rym90 %0", "rx90 %0"],
        "cl_21 %0": ["ry90 %0"],
        "cl_22 %0": ["rxm90 %0", "ry180 %0"],
        "cl_23 %0": ["rx90 %0", "ry90 %0", "rxm90 %0"],

        // CC feedback
        "measure_fb %0": ["measure %0", "_wait_uhfqa %0", "_dist_dsm %0", "_wait_dsm %0"]
  	},



    // User defined instruction set.
    // Sub keys for "instructions", standard OpenQL:
    // - <key>                          name for the instruction (NB: supports several naming schemes)
    // - <key>/duration                 duration in [ns]
    // - <key>/latency                  optional instruction latency (effect unclear)
    // - <key>/matrix                   required, but generally does not contain useful information
    //
    // The cc-light scheduler that we currently use requires the following sub keys:
    // - <key>/type
    // Sub keys for "instructions", CC additions:
    // - <key>/cc/signal/type
    // - <key>/cc/signal/operand_idx
    // - <key>/cc/signal/value
    //                                  Supports the following macro expansions:
    //                                  * {gateName}
    //                                  * {instrumentName}
    //                                  * {instrumentGroup}
    //                                  * {qubit}
    // - <key>/cc/ref_signal            reference to key 'signals/<value> instead of '<key>/cc/signal'
    //
    //
    // FIXME: allow AWG8 setPrecompClear with wave

	"instructions": {
        // based on PyqQED_py3 'mw_lutman.py' and 'generate_CCL_cfg.py':
        "i": {
            "duration": 20,
            "cc": {
//                "ref_signal": "single-qubit-mw",
                "signal": [],   // no signal, to prevent conflicts with other gates (NB: will output nothing because VSM stays off)
                "static_codeword_override": [0]
            }
        },
        "rx180": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",    // NB: reference, instead of defining "signal" here
                "static_codeword_override": [1]
            }
        },
        "ry180": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "rx90": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "ry90": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "rxm90": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "rym90": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },

        //////////////////////////////////////////
        // Custom operations for Quantum Inspire
        //////////////////////////////////////////
        "ry45": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [1]
            }
        },

        "rym45": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },

        "rx45": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },

        "rxm45": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        //////////////////////////////////////////

        "cz": {
            "duration": 80,
            "cc": {
                "ref_signal": "two-qubit-flux",     // NB: reference, instead of defining "signal" here
                "static_codeword_override": [1,1]     // FIXME
            }
        },
        "cz_park": {
            "duration": 80,
            "cc": {
                "signal": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 1,                                   // target
                        "value": ["flux-1-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 2,                                   // park
                        "value": ["park_cz-{qubit}"]
                    }
                ],
                "static_codeword_override": [0,0,0]   // FIXME
            }
        },

		// additions from 'CC-software-implementation.docx'
		// flux pulses, see:
        // - https://github.com/QuTech-Delft/OpenQL/issues/176
        // - https://github.com/QuTech-Delft/OpenQL/issues/224
        // - https://github.com/QuTech-Delft/OpenQL/pull/238

		"park_cz" : { // park signal with same length as cz gate
			"duration" : 80,
			"cc": {
				"signal": [
					{	"type": "flux",
						"operand_idx": 0,
						"value": ["park_cz-{qubit}"]
					}
				],
                "static_codeword_override": [0]   // FIXME
			}
		},

		"park_measure" : { // park signal with same length as measurement
			"duration" : 2000,
			"cc": {
				"signal": [
					{	"type": "flux",
						"operand_idx": 0,
						"value": ["park_measure-{qubit}"]
					}
				],
                "static_codeword_override": [0]   // FIXME
			}
		},


		// based on PyqQED_py3 'generate_CCL_cfg.py':
		"prepz": {
			"duration": 200000,
            "cc": {
//                "ref_signal": "single-qubit-mw"
                "signal": [],    // FIXME: no signal, pycQED::test_multi_qubit_oql_CC.py fails otherwise on scheduling issues
                "static_codeword_override": [0]   // FIXME
            }
		},

		"measure": {
			"duration": 2000,
			"cc": {
			    "readout_mode": "",
				"signal": [
					{	"type": "measure",
						"operand_idx": 0,
						"value": ["dummy"],			// Future extension: specify output, and generate code word. Use "" if no output is present
						"weight": ["dummy"]			// Future extension: specify weight (implies readout? How about INT_AVG)
					}
				],
                "static_codeword_override": [0]   // FIXME
			}
		},

        // additions for feedback
        "_wait_uhfqa": {
            "duration": 220,
            "cc": {
                "signal": []
            }
        },
		"_dist_dsm": {
			"duration": 20,
			"cc": {
			    "readout_mode": "feedback",
				"signal": [
					{	"type": "measure",
						"operand_idx": 0,
						"value": []
					}
                ]
			}
		},
        "_wait_dsm": {
            "duration": 80,
            "cc": {
                "signal": []
            }
        },

		"if_0_break": {
			"duration": 60,
			"cc": {
				"signal": [],
				"pragma": {
                    "break": 0
				}
			}
		},

		"if_1_break": {
			"duration": 60,
			"cc": {
				"signal": [],
				"pragma": {
                    "break": 1
				}
			}
		},

        // additions for pycQED::test_single_qubit_oql_CC.py
        // FIXME: contents untested
        "square": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "spec": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "rx12": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        // ensure codewords to 32 for echo sequences generated
        "cw_00": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "cw_01": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [1]
            }
        },
        "cw_02": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "cw_03": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "cw_04": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "cw_05": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "cw_06": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },
        "cw_07": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [7]
            }
        },
        "cw_08": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [8]
            }
        },
        "cw_09": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [9]
            }
        },
        "cw_10": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "cw_11": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [1]
            }
        },
        "cw_12": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "cw_13": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "cw_14": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "cw_15": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "cw_16": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },
        "cw_17": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [7]
            }
        },
        "cw_18": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [8]
            }
        },
        "cw_19": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [9]
            }
        },
        "cw_20": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "cw_21": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [1]
            }
        },
        "cw_22": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [2]
            }
        },
        "cw_23": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [3]
            }
        },
        "cw_24": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [4]
            }
        },
        "cw_25": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [5]
            }
        },
        "cw_26": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [6]
            }
        },
        "cw_27": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [7]
            }
        },
        "cw_28": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [8]
            }
        },
        "cw_29": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [9]
            }
        },
        "cw_30": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [0]
            }
        },
        "cw_31": {
            "duration": 20,
            "cc": {
                "ref_signal": "single-qubit-mw",
                "static_codeword_override": [1]
            }
        },


        // fl_cw_00 .. fl_cw_07
        "fl_cw_00": {
            "duration": 80,
            "cc": {
                "ref_signal": "two-qubit-flux",     // FIXME
                "static_codeword_override": [0]
            }
        },
        "fl_cw_01": {
            "duration": 80,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "fl_cw_02": {
            "duration": 80,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "fl_cw_03": {
            "duration": 80,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "fl_cw_04": {
            "duration": 80,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "fl_cw_05": {
            "duration": 80,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "fl_cw_06": {
            "duration": 80,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [6]
            }
        },
        "fl_cw_07": {
            "duration": 80,
            "cc": {
                "ref_signal": "two-qubit-flux",
                "static_codeword_override": [7]
            }
        },

        // single qubit flux hacks (compatible with QCC demo/flux lutman)
        // (qubit numbers defined to allow cz decomposition to ne,nw,se,sw based
        // on topology through gate decompositions defined above)
        "sf_cz_ne q2": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "sf_cz_ne q3": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [1]
            }
        },
        "sf_cz_se q0": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "sf_cz_se q2": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [2]
            }
        },
        "sf_cz_sw q1": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "sf_cz_sw q2": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [3]
            }
        },
        "sf_cz_nw q2": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "sf_cz_nw q4": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [4]
            }
        },
        "sf_park q3": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "sf_park q4": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "sf_sp_park": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [5]
            }
        },
        "sf_square": {
            "duration": 80,
            "cc": {
                "ref_signal": "single-qubit-flux",
                "static_codeword_override": [6]
            }
        }
    }   // end of "instructions"
}
