{
	// author: 	Wouter Vlothuizen
	// notes:


	// The qubits in our setup have the following roles:
	// - D = data
	// - X = ancilla's performing X-type parity checks
	// - Z = idem, Z-type
	//
	// The S-17 layout is shown below, connectivity is between horizontal and vertical neighbors.
	// Based on references:
	// 1) Figure 1 of '1612.08208v1.pdf', rotated by 45 deg
	// 2) 'S17 design considerations_for_Xiang.pdf', renumbered from 0
	//
	// 	-- Z0 D0 -- --
	// 	-- D3 X1 D1 X0
	// 	D6 Z2 D4 Z1 D2
	// 	X3 D7 X2 D5 --
	// 	-- -- D8 Z3 --
	//
	// The frequency assignment of the qubits is (L=low, Mg/My=medium green/yellow, H=high), based on reference 2) :
	// 	-  Mg H  -  -
	// 	-  L  My H  Mg
	// 	H  My L  Mg H
	// 	My H  Mg L  -
	// 	-  -  H  My -
	//
	// We propose the following grid based qubit numbering scheme with the following properties:
	// - starts at 0 and exceeds the number of qubits actually implemented
	// - data quits have even numbers
	// - qubit N is connected to N-1, N+1, N-5, N+5 (insofar present)
	//
	//		-	1	2	-	-
	//		-  6	7  8  9
	//		10 11 12 13 14
	//		15 16 17 18 -
	//		-  -  22 23 -
	//
	//	Combining the above (and taking the feed lines from reference 2), we arrive at the following table
	//
	// 	index	qubit	name		Freq		feed line
	// 	----------------------------------------
	//		0		1		Z0			Mg			1
	//		1		2		D0			H			1
	//		2		6		D3			L			1
	//		3		7		X1			My			1
	//		4		8		D1			H			2
	//		5		9		X0			Mg			2
	//		6		10		D6			H			0
	//		7		11		Z2			My			1
	//		8		12		D4			L			1
	//		9		13		Z1			Mg			2
	//		10		14		D2			H			2
	//		11		15		X3			My			0
	//		12		16		D7			H			1
	//		13		17		X2			Mg			1
	//		14		18		D5			L			2
	//		15		22		D8			H			1
	//		16		23		Z3			My			2


	// FIXME: proposed header, not used
	"file_type": "OpenQL-config",
	"file_version": "1.1",
	"min_version_openql": "0.5.3",

	"eqasm_compiler" : "eqasm_backend_cc",

	"hardware_settings": {
		"qubit_number": 25,		// of which 17 are used
		"cycle_time" : 20,
		// FIXME: the settings below don't seem to be used on CClight either
		// "mw_mw_buffer": 0,
		// "mw_flux_buffer": 0,
		// "mw_readout_buffer": 0,
		// "flux_mw_buffer": 0,
		// "flux_flux_buffer": 0,
		// "flux_readout_buffer": 0,
		// "readout_mw_buffer": 0,
		// "readout_flux_buffer": 0,
		// "readout_readout_buffer": 0,

		// FIXME: we put this key inside "hardware_settings" for now, but it should preferably be below "backend" or so
		"eqasm_backend_cc": {
			// Immutable properties of instruments.
			// FIXME: introduce 'controller_definitions' for CC and friends?
			"instrument_definitions": {
				"qutech-qwg": {
					"channels": 4,
					"control_group_sizes": [1,4],
					"latency": 50		// FIXME: check
				},
				"zi-hdawg": {
					"channels": 8,
					"control_group_sizes": [1, 4, 8],
					"latency": 300		// FIXME: check. If latency depends on FW version, several definitions must be present
				},
				"qutech-vsm": {
					"channels": 32,
					"control_group_sizes": [1],
					"latency": 10		// FIXME: check
				},
				"zi-uhfqa": {
					"channels": 9,
					"control_group_sizes": [1],
					"latency": 150		// FIXME: check
				}
			},   // instrument_definitions

			// Modes to control instruments. These define which bits are used to
			// control groups of channels and/or get back measurement results
			"control_modes": {
				"awg8-mw-vsm": {						  // ZI_HDAWG8.py::cfg_codeword_protocol() == 'microwave'
					"control_bits": [
						[7,6,5,4,3,2,1,0],
						[15,14,13,12,11,10,9,8]
					],
					"trigger_bits": [31]
				},
				"awg8-mw-direct-iq": {				      // just I&Q to generate microwave without VSM
					"control_bits": [
						[6,5,4,3,2,1,0],				  // FIXME: no official mode yet
						[13,12,11,10,9,8,7],
						[20,19,18,17,16,15,14],
						[27,26,25,24,23,22,21]
					],
					"trigger_bits": [31]
				},
				"awg8-flux": {							   // ZI_HDAWG8.py::cfg_codeword_protocol() == 'flux'
					"control_bits": [
						[2,1,0],
						[5,4,3],
						[8,7,6],
						[11,10,9],
						[14,13,12],
						[17,16,15],
						[20,19,18],
						[23,22,21]
					],
					"trigger_bits": [31]
				},
				"awg8-flux-vector": {				       // single code word for 8 flux channels
					"control_bits": [
						[7,6,5,4,3,2,1,0]
					],
					"trigger_bits": [31]
				},
				"uhfqa-9ch": {
					"control_bits": [[25],[24],[23],[22],[21],[20],[19],[18],[17]],
					"trigger_bits": [16],
					"result_bits": [[9],[8],[7],[6],[5],[4],[3],[2],[1]],
					"data_valid_bits": [0]
				},
				"vsm-32ch":{
					"control_bits": [
						[0],[1],[2],[3],[4],[5],[6],[7],
						[8],[9],[10],[11],[12],[13],[14],[15],
						[16],[17],[18],[19],[20],[21],[22],[23],
						[24],[25],[26],[27],[28],[28],[30],[31]
					],
					"trigger_bits": []				       // no trigger
				}
			},   // control_modes

            // Signal library that gate definitions can refer to.
            // Supports the following macro expansions for key "value":
            // * {gateName}
            // * {instrumentName}
            // * {instrumentGroup}
            // * {qubit}
            // NB: our JSON library does not yet support JSON pointers like:
            // "signal": {"$ref": "#/hardware_settings/eqasm_backend_cc/signals/single-qubit"}
            "signals": {
                "single-qubit": [
                    {   "type": "mw",
                        "operand_idx": 0,
                        "value": [
                            "{gateName}-{instrumentName}:{instrumentGroup}-gi",
                            "{gateName}-{instrumentName}:{instrumentGroup}-gq",
                            "{gateName}-{instrumentName}:{instrumentGroup}-di",
                            "{gateName}-{instrumentName}:{instrumentGroup}-dq"
                        ]
                    },
                    {   "type": "switch",
                        "operand_idx": 0,
                        "value": ["dummy"]                                  // NB: no actual signal is generated
                    }
                ],
                "two-qubit": [
                    {   "type": "flux",
                        "operand_idx": 0,                                   // control
                        "value": ["flux-0-{qubit}"]
                    },
                    {   "type": "flux",
                        "operand_idx": 1,                                   // target
                        "value": ["flux-1-{qubit}"]
                    }
                ]
            },  // signals

			// Instruments used in this setup, their configuration and connectivity.
			"instruments": [
				// readout. FIXME: must match 'resources/meas_units'
				{
					"name": "uhfqa-0",
                    "qubits": [[10], [15], [], [], [], [], [], [], []],
                    "signal_type": "measure",
					"ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 0,
						"io_module": "CC-CONN-DIO"
					}
				},
				{
					"name": "uhfqa-1",
                    "qubits": [[1], [2], [6], [7], [11], [12], [16], [17], [22]],
                    "signal_type": "measure",
					"ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 1,
						"io_module": "CC-CONN-DIO"
					}
				},
				{
					"name": "uhfqa-2",
                    "qubits": [[8], [9], [13], [14], [18], [23], [], [], []],
                    "signal_type": "measure",
					"ref_instrument_definition": "zi-uhfqa",
                    "ref_control_mode": "uhfqa-9ch",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 2,
						"io_module": "CC-CONN-DIO"
					}
				},

				// microwave. FIXME: must match 'resources/qwgs'
				{
					"name": "awg8-mw-0",
                    "qubits": [                                             // data qubits:
//                        [6, 12, 18],                                        // [freq L]
                        [2, 8, 10, 14, 16, 22],                              // [freq H]
                        [6, 12, 18]                                        // [freq L]
                    ],
                    "signal_type": "mw",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-vsm",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 8,    //3,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				},
				{
					"name": "awg8-mw-1",
                    "qubits": [                                             // ancilla qubits:
                        [1, 9, 13, 17],                                     // [freq Mg]
                        [7, 11, 15, 23]                                     // [freq My]
                    ],
                    "signal_type": "mw",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-mw-vsm",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 4,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				},

				// VSM
				{
					"name": "vsm-0",
                    "qubits": [
                        [6, 12, 18],                                        // [freq L]
                        [2, 8, 10, 14, 16, 22],                             // [freq H]
                        [1, 9, 13, 17],                                     // [freq Mg]
                        [7, 11, 15, 23]                                     // [freq My]
                    ],
                    "signal_type": "switch",
					"ref_instrument_definition": "qutech-vsm",
                    "ref_control_mode": "vsm-32ch",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 5,
						"io_module": "cc-conn-vsm"
					}
				},

				// flux
				{
					"name": "awg8-flux-0",
                    "qubits": [[1], [2], [6], [7], [8], [9], [10], [11]],
                    "signal_type": "flux",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 6,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				},
				{
					"name": "awg8-flux-1",
                    "qubits": [[12], [13], [14], [15], [16], [17], [18], [22]],
                    "signal_type": "flux",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 7,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				},
				{
					"name": "awg8-flux-2",
                    "qubits": [[23], [], [], [], [], [], [], []],
                    "signal_type": "flux",
					"ref_instrument_definition": "zi-hdawg",
                    "ref_control_mode": "awg8-flux",
					"controller": {
						"name": "cc",	// FIXME
						"slot": 3,    //8,
						"io_module": "CC-CONN-DIO-DIFF"
					}
				}
			] // instruments
		}
	},

	// NB: the "topology" keyword must be present, but the contents are only interpreted by
	// the 'resource constraint' scheduler (TBC)
	"topology": {
		// FIXME: apparently unused:
		// "x_size": 5,
		// "y_size": 3,
		// "qubits": [
		// 	{ "id": 0,  "x": 1, "y": 2 },
		// 	{ "id": 1,  "x": 3, "y": 2 },
		// 	{ "id": 2,  "x": 0, "y": 1 },
		// 	{ "id": 3,  "x": 2, "y": 1 },
		// 	{ "id": 4,  "x": 4, "y": 1 },
		// 	{ "id": 5,  "x": 1, "y": 0 },
		// 	{ "id": 6,  "x": 3, "y": 0 }
		// ],

		// Directed edges between qubits (from "src" to "dst") define allowable
		// two qubit operations.
		// see:
		// - https://github.com/DiCarloLab-Delft/ElecPrj_CCLight/wiki/Qubit-number-and-directed-edge-number
		// - https://github.com/QE-Lab/OpenQL/blob/847ff7d373b5fe7ce23c0669cb194c79525aad2e/ql/arch/cc_light/cc_light_resource_manager.h#L352
		// NB: the actual edge numbering is irrelevant to the CC, which has no knowledge about edges
		"edges": [
			{ "id":  0,	"src":  1, "dst":	 2 },
			{ "id":  1,	"src":  1, "dst":	 6 },
			{ "id":  2,	"src":  2, "dst":	 1 },
			{ "id":  3,	"src":  2, "dst":	 7 },
			{ "id":  4,	"src":  6, "dst":	 1 },
			{ "id":  5,	"src":  6, "dst":	 7 },
			{ "id":  6,	"src":  6, "dst":	11 },
			{ "id":  7,	"src":  7, "dst":	 2 },
			{ "id":  8,	"src":  7, "dst":	 6 },
			{ "id":  9,	"src":  7, "dst":	 8 },
			{ "id": 10,	"src":  7, "dst":	12 },
			{ "id": 11,	"src":  8, "dst":	 7 },
			{ "id": 12,	"src":  8, "dst":	 9 },
			{ "id": 13,	"src":  8, "dst":	13 },
			{ "id": 14,	"src":  9, "dst":	 8 },
			{ "id": 15,	"src":  9, "dst":	14 },
			{ "id": 16,	"src": 10, "dst":	11 },
			{ "id": 17,	"src": 10, "dst":	15 },
			{ "id": 18,	"src": 11, "dst":	 6 },
			{ "id": 19,	"src": 11, "dst":	10 },
			{ "id": 20,	"src": 11, "dst":	12 },
			{ "id": 21,	"src": 11, "dst":	16 },
			{ "id": 22,	"src": 12, "dst":	 7 },
			{ "id": 23,	"src": 12, "dst":	11 },
			{ "id": 24,	"src": 12, "dst":	13 },
			{ "id": 25,	"src": 12, "dst":	17 },
			{ "id": 26,	"src": 13, "dst":	 8 },
			{ "id": 27,	"src": 13, "dst":	12 },
			{ "id": 28,	"src": 13, "dst":	14 },
			{ "id": 29,	"src": 13, "dst":	18 },
			{ "id": 30,	"src": 14, "dst":	 9 },
			{ "id": 31,	"src": 14, "dst":	13 },
			{ "id": 32,	"src": 15, "dst":	10 },
			{ "id": 33,	"src": 15, "dst":	16 },
			{ "id": 34,	"src": 16, "dst":	11 },
			{ "id": 35,	"src": 16, "dst":	15 },
			{ "id": 36,	"src": 16, "dst":	17 },
			{ "id": 37,	"src": 17, "dst":	12 },
			{ "id": 38,	"src": 17, "dst":	16 },
			{ "id": 39,	"src": 17, "dst":	18 },
			{ "id": 40,	"src": 17, "dst":	22 },
			{ "id": 41,	"src": 18, "dst":	13 },
			{ "id": 42,	"src": 18, "dst":	17 },
			{ "id": 43,	"src": 18, "dst":	23 },
			{ "id": 44,	"src": 22, "dst":	17 },
			{ "id": 45,	"src": 22, "dst":	23 },
			{ "id": 46,	"src": 23, "dst":	18 },
			{ "id": 47,	"src": 23, "dst":	22 }
		]
	},


	// NB: the "resources" keyword must be present, but the contents are only interpreted by
	// the 'resource constraint' scheduler (TBC)
	"resources": {		// see: https://github.com/QE-Lab/OpenQL/blob/847ff7d373b5fe7ce23c0669cb194c79525aad2e/ql/arch/cc_light/cc_light_resource_manager.h#L724
		"qubits": {
			"count": 25		// of which 17 are used. FIXME: duplicates 'hardware_settings/qubit_number'
		},
		"qwgs" : {
			"count": 4,
			"connection_map": {	// FIXME: must match "instruments"
				"0": [6, 12, 18],											//	[freq L]
				"1": [2, 8, 10, 14, 16, 22],								// [freq H]
				"2": [1, 9, 13, 17], 										// [freq Mg]
				"3": [7, 11, 15, 23]										// [freq My]
			}
		},
		"meas_units" : {
			"count": 3,
			"connection_map": {	// FIXME: must match "instruments"
				"0": [10, 15],
				"1": [1, 2, 6, 7, 11, 12, 16, 17, 22],
				"2": [8, 9, 13, 14, 18, 23]
			}
		},
		"edges": {
		 	"count": 48,		// FIXME: must be present and at least match size of 'topology/edges', see edge_resource_t
		 	// connection_map:
		 	// "0": [2, 10] means that edge 0 'connects' to edges 2 and 10, where edges
		 	// refer to the "id" in 'topology/edges'
		 	// The term 'connect' in this context means that an operation on edge 0
		 	// blocks operations on edges 2 and 10
		 	// see: https://github.com/QE-Lab/OpenQL/blob/847ff7d373b5fe7ce23c0669cb194c79525aad2e/ql/arch/cc_light/cc_light_resource_manager.h#L371
			"connection_map": {
				// "0": [],
				// "1": [],
				// "2": [],
				// "3": [],
				// "4": [],
				// "5": [],
				// "6": [],
				// "7": [],
				// "8": [],
				// "9": [],
				// "10": [],
				// "11": [],
				// "12": [],
				// "13": [],
				// "14": [],
				// "15": [],
			}
		}

		//"detuned_qubits"	FIXME: required?
	},

	// extracted from PyqQED_py3 'generate_CCL_cfg.py'
  	"gate_decomposition": {
      "x %0": ["rx180 %0"],
      "y %0": ["ry180 %0"],
      "roty90 %0": ["ry90 %0"],
      "cnot %0,%1": ["ry90 %1", "cz %0,%1", "ry90 %1"],

      // To support other forms of writing the same gates
      "x180 %0": ["rx180 %0"],
      "y180 %0": ["ry180 %0"],
      "y90 %0": ["ry90 %0"],
      "x90 %0": ["rx90 %0"],
      "my90 %0": ["rym90 %0"],
      "mx90 %0": ["rxm90 %0"],

      // Clifford decomposition per Epstein et al. Phys. Rev. A 89, 062321 (2014)
      "cl_0 %0": ["i %0"],
      "cl_1 %0": ["ry90 %0", "rx90 %0"],
      "cl_2 %0": ["rxm90 %0", "rym90 %0"],
      "cl_3 %0": ["rx180 %0"],
      "cl_4 %0": ["rym90 %0", "rxm90 %0"],
      "cl_5 %0": ["rx90 %0", "rym90 %0"],
      "cl_6 %0": ["ry180 %0"],
      "cl_7 %0": ["rym90 %0", "rx90 %0"],
      "cl_8 %0": ["rx90 %0", "ry90 %0"],
      "cl_9 %0": ["rx180 %0", "ry180 %0"],
      "cl_10 %0": ["ry90 %0", "rxm90 %0"],
      "cl_11 %0": ["rxm90 %0", "ry90 %0"],
      "cl_12 %0": ["ry90 %0", "rx180 %0"],
      "cl_13 %0": ["rxm90 %0"],
      "cl_14 %0": ["rx90 %0", "rym90 %0", "rxm90 %0"],
      "cl_15 %0": ["rym90 %0"],
      "cl_16 %0": ["rx90 %0"],
      "cl_17 %0": ["rx90 %0", "ry90 %0", "rx90 %0"],
      "cl_18 %0": ["rym90 %0", "rx180 %0"],
      "cl_19 %0": ["rx90 %0", "ry180 %0"],
      "cl_20 %0": ["rx90 %0", "rym90 %0", "rx90 %0"],
      "cl_21 %0": ["ry90 %0"],
      "cl_22 %0": ["rxm90 %0", "ry180 %0"],
      "cl_23 %0": ["rx90 %0", "ry90 %0", "rxm90 %0"],

      // CC additions
      "cnot_park1 %0,%1,%2": ["ry90 %1", "cz %0,%1", "park_cz %2", "ry90 %1"],
      "cnot_park2 %0,%1,%2": ["ry90 %1", "cz_park %0,%1,%2", "ry90 %1"],
      "cz_park1 %0,%1,%2": ["cz %0,%1", "park_cz %2"]
  	},


	// FIXME: allow AWG8 setPrecompClear with wave
	// FIXME: key 'matrix' is required, but does not contain useful information
	"instructions": {
		// additions from 'CC-software-implementation.docx', these are single-qubit
		// flux pulses, see issue #176:
		"park_cz" : { // park signal with same length as cz gate
			"duration" : 40,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"cc_light_instr": "park_cz",
			"type": "measure",		// FIXME
			"cc": {
				"signal": [
					{	"type": "flux",
						"operand_idx": 0,
						"value": ["park_cz-{qubit}"]
					}
				]
			}
		},

		"park_measure" : { // park signal with same length as measurement
			"duration" : 300,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"cc": {
				"signal": [
					{	"type": "flux",
						"operand_idx": 0,
						"value": ["park_measure-{qubit}"]
					}
				]
			}
		},


		// based on PyqQED_py3 'generate_CCL_cfg.py':
		"prepz": {
			"duration": 200000,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "readout",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "prepz"
		},

		"measure": {
			"duration": 400,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "readout",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "measz",
			"cc": {
				"signal": [
					{	"type": "measure",
						"operand_idx": 0,
						"value": ["dummy"]			// Future extension: specify output and weight, and generate code word
					}
				]
			}
		},

		// based on PyqQED_py3 'mw_lutman.py' and 'generate_CCL_cfg.py':
		// FIXME: also add conditional single qubit gates?
		"i": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "i",
			"cc": {
				"ref_signal": "single-qubit"
			}
		},
		"rx180": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "x",
			"cc": {
				"ref_signal": "single-qubit"		// NB: reference, instead of defining "signal" here
			}
		},
		"ry180": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "y",
			"cc": {
				"ref_signal": "single-qubit"
			}
		},
		"rx90": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "x90",
			"cc": {
				"ref_signal": "single-qubit"
			}
		},
		"ry90": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "y90",
			"cc": {
				"ref_signal": "single-qubit"
			}
		},
		"rxm90": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "xm90",
			"cc": {
				"ref_signal": "single-qubit"
			}
		},
		"rym90": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "ym90",
			"cc": {
				"ref_signal": "single-qubit"
			}
		},



		// should handle:
		// https://github.com/QE-Lab/OpenQL/issues/166
		// https://github.com/QE-Lab/OpenQL/issues/180
		"cz": {
			"duration": 40,
//			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "flux",
			"cc_light_instr_type": "two_qubit_gate",
			"cc_light_instr": "cz",
			"cc": {
				"ref_signal": "two-qubit"		// NB: reference, instead of defining "signal" here
			}
		},
		"cz_park": {
			"duration": 40,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"type": "flux",
			"cc_light_instr_type": "two_qubit_gate",
			"cc_light_instr": "cz",
			"cc": {
				"signal": [
					{	"type": "flux",
						"operand_idx": 0,									// control
						"value": ["flux-0-{qubit}"]
					},
					{	"type": "flux",
						"operand_idx": 1,									// target
						"value": ["flux-1-{qubit}"]
					},
					{	"type": "flux",
						"operand_idx": 2,									// park
						"value": ["park_cz-{qubit}"]
					}
				]
			}
		}
	}	// end of "instructions"
}

