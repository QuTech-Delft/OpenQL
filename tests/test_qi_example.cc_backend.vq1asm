# Program: 'test_qi_example'
# CC_BACKEND_VERSION 0.4.0
# OPENQL_VERSION 0.11.1
# Note:    generated by OpenQL Central Controller backend
#
.CODE                           
# synchronous start and latency compensation
                seq_bar                                             # synchronization, delay set externally through SET_SEQ_BAR_CNT
                seq_out         0x00000000,1                        # allows monitoring actual start time using trace unit
# start of main loop that runs indefinitely
__mainLoop:                                                         # 
                seq_state       0                                   # clear Programmable Logic state
                
### Block: 'kernel_0'
## Bundle 0: start_cycle=0:
 # gate 'prepz <W:qubit> q[0]'
 # gate 'prepz <W:qubit> q[1]'
 # gate 'prepz <W:qubit> q[2]'
 # gate 'prepz <W:qubit> q[3]'
 # gate 'prepz <W:qubit> q[4]'
                
## Bundle 1: start_cycle=10000:
 # gate 'ry180 <U:qubit> q[0], <U:qubit> q[2]'
  # slot=6, instrument='mw_2', group=0': signalValue='{phi:90,theta:180,type:ge}'
 # gate '_cz_sw_ne_park <Z:qubit> q[8], <Z:qubit> q[10], <I:qubit> q[11]'
  # slot=3, instrument='flux_0', group=0': signalValue='{type:cz,which:SW}'
  # slot=3, instrument='flux_0', group=2': signalValue='{type:idle_z,which:NE}'
  # slot=3, instrument='flux_0', group=3': signalValue='{type:park}'
  # slot=6, instrument='mw_2', group=0: codeword=2 (static override): groupDigOut=0x00000002
  # slot=3, instrument='flux_0', group=0: codeword=3 (static override): groupDigOut=0x00000003
  # slot=3, instrument='flux_0', group=2: codeword=1 (static override): groupDigOut=0x00000040
  # slot=3, instrument='flux_0', group=3: codeword=5 (static override): groupDigOut=0x00000a00
  # slot=6, instrument='mw_2': lastEndCycle=0, startCycle=10000, instrMaxDurationInCycles=1
[6]             seq_wait        10000                               # cycle 0-10000: padding on 'mw_2'
[6]             seq_out         0x80008002,1                        # cycle 10000-10001: code word/mask on 'mw_2'
  # slot=3, instrument='flux_0': lastEndCycle=0, startCycle=10000, instrMaxDurationInCycles=2
[3]             seq_wait        10000                               # cycle 0-10000: padding on 'flux_0'
[3]             seq_out         0x80008a43,2                        # cycle 10000-10002: code word/mask on 'flux_0'
                
## Bundle 2: start_cycle=10001:
 # gate 'ry90 <Y:qubit> q[2]'
  # slot=6, instrument='mw_2', group=2': signalValue='{phi:90,theta:90,type:ge}'
  # slot=6, instrument='mw_2', group=2: codeword=4 (static override): groupDigOut=0x00040000
  # slot=6, instrument='mw_2': lastEndCycle=10001, startCycle=10001, instrMaxDurationInCycles=1
[6]             seq_out         0x80048000,1                        # cycle 10001-10002: code word/mask on 'mw_2'
                
## Bundle 3: start_cycle=10002:
 # gate 'measure <U:qubit> q[0], <W:bit> (bit)q[0]'
  # slot=4, instrument='ro_1', group=0': signalValue='[dummy]'
 # gate 'measure <U:qubit> q[1], <W:bit> (bit)q[1]'
  # slot=2, instrument='ro_0', group=0': signalValue='[dummy]'
 # gate 'measure <U:qubit> q[2], <W:bit> (bit)q[2]'
  # slot=4, instrument='ro_1', group=1': signalValue='[dummy]'
 # gate 'measure <U:qubit> q[3], <W:bit> (bit)q[3]'
  # slot=4, instrument='ro_1', group=2': signalValue='[dummy]'
 # gate 'measure <U:qubit> q[4], <W:bit> (bit)q[4]'
  # slot=2, instrument='ro_0', group=1': signalValue='[dummy]'
                
                
                
                
                
  # slot=2, instrument='ro_0': lastEndCycle=0, startCycle=10002, instrMaxDurationInCycles=40
[2]             seq_wait        10002                               # cycle 0-10002: padding on 'ro_0'
[2]             seq_out         0x00070000,40                       # cycle 10002-10042: code word/mask on 'ro_0'
  # slot=4, instrument='ro_1': lastEndCycle=0, startCycle=10002, instrMaxDurationInCycles=40
[4]             seq_wait        10002                               # cycle 0-10002: padding on 'ro_1'
[4]             seq_out         0x000f0000,40                       # cycle 10002-10042: code word/mask on 'ro_1'
                
## Bundle 4: start_cycle=10042:
 # last bundle of kernel, will pad outputs to match durations
[5]             seq_wait        10042                               # cycle 0-10042: padding on 'ro_2'
[0]             seq_wait        10042                               # cycle 0-10042: padding on 'mw_0'
[1]             seq_wait        10042                               # cycle 0-10042: padding on 'mw_1'
[6]             seq_wait        40                                  # cycle 10002-10042: padding on 'mw_2'
[7]             seq_wait        10042                               # cycle 0-10042: padding on 'mw_3'
[8]             seq_wait        10042                               # cycle 0-10042: padding on 'mw_4'
[3]             seq_wait        40                                  # cycle 10002-10042: padding on 'flux_0'
[9]             seq_wait        10042                               # cycle 0-10042: padding on 'flux_1'
[10]            seq_wait        10042                               # cycle 0-10042: padding on 'flux_2'
                
### Block end: 'kernel_0'
# finish program
                seq_wait        1                                   
                jmp             @__mainLoop                         # loop indefinitely
.END                            
.DATAPATH                                               
## Bundle 0: start_cycle=0:
## Bundle 1: start_cycle=10000:
## Bundle 2: start_cycle=10001:
## Bundle 3: start_cycle=10002:
## Bundle 4: start_cycle=10042:
.END                                                    
