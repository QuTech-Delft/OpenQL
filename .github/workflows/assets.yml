name: Assets

on:
  release:
    types:
    - created
  push:
    branches:
    - 'release**'

# Note: 'actions/upload-release-asset@v1' often fails with 'read ECONNRESET'
# According to https://github.com/actions/upload-release-asset, it is no longer maintained
# To increase the chances of obtaining all assets - potentially after manually retrying - we set
# 'jobs.<job_id>.strategy.fail-fast: false' until a proper solution is implemented
jobs:
  macos:
    name: PyPI wheels for macOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        python:
        - '3.6'
        - '3.7'
        - '3.8'
        - '3.9'
        - '3.10'
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Install dependencies
      run: |
        brew install bison flex swig xquartz
        echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
        echo "/usr/local/opt/flex/bin" >> $GITHUB_PATH
        python -m pip install --upgrade pip setuptools wheel
    - name: Build wheel
      env:
        NPROCS: 5
      run: python setup.py bdist_wheel
    - name: Wheel path
      id: wheel
      working-directory: pybuild/dist/
      run: echo "##[set-output name=wheel;]$(ls *.whl)"
    - uses: actions/upload-artifact@v2
      with:
        name: pypi-macos-py${{ matrix.python }}
        path: pybuild/dist/${{ steps.wheel.outputs.wheel }}
    - uses: actions/upload-release-asset@v1
      if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: pybuild/dist/${{ steps.wheel.outputs.wheel }}
        asset_name: ${{ steps.wheel.outputs.wheel }}
        asset_content_type: application/zip

  manylinux:
    name: PyPI wheels for Manylinux
    runs-on: ubuntu-latest
    container: quay.io/pypa/manylinux${{ matrix.manylinux }}_x86_64:latest
    env:
      FLEX_VERSION: '2.6.4'
      BISON_VERSION: ${{ matrix.bison_version }}
      SWIG_VERSION: ${{ matrix.swig_version }}
      CMAKE_VERSION: '3.1.3'
    strategy:
      fail-fast: false
      matrix:
        manylinux:
        - 2014
        - _2_28
        cpython_version:
        - 'cp36-cp36m'
        - 'cp37-cp37m'
        - 'cp38-cp38'
        - 'cp39-cp39'
        - 'cp310-cp310'
        include:
          - manylinux: 2014
            bison_version: 'bison-3.0.4-2.el7'
            swig_version: 'swig3-3.0.12-17.el7'
          - manylinux: _2_28
            bison_version: 'bison-3.0.4-10.el8'
            swig_version: 'swig-3.0.12-19.module_el8.3.0+6167+838326ab'

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Install dependencies
      run: |
        yum install -y $BISON_VERSION $SWIG_VERSION
        /opt/python/${{ matrix.cpython_version }}/bin/python -m pip install auditwheel
    - name: Install flex
      run: |
        mkdir -p $HOME/flex
        curl -L https://github.com/westes/flex/releases/download/v$FLEX_VERSION/flex-$FLEX_VERSION.tar.gz | tar xz --strip-components=1 -C $HOME/flex
        cd $HOME/flex
        ./configure
        make -j
        make install
    - name: Install cmake
      run: curl -L https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-x86_64.tar.gz | tar xz --strip-components=1 -C /usr
    - name: Build wheel
      env:
        NPROCS: 5
      run: |
        /opt/python/${{ matrix.cpython_version }}/bin/python setup.py bdist_wheel
        /opt/python/${{ matrix.cpython_version }}/bin/python -m auditwheel repair pybuild/dist/*.whl
    - name: Wheel path
      id: wheel
      working-directory: wheelhouse
      run: echo "##[set-output name=wheel;]$(ls *.whl)"
    - uses: actions/upload-artifact@v2
      with:
        name: pypi-linux-${{ matrix.cpython_version }}
        path: wheelhouse/${{ steps.wheel.outputs.wheel }}
    - uses: actions/upload-release-asset@v1
      if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: wheelhouse/${{ steps.wheel.outputs.wheel }}
        asset_name: ${{ steps.wheel.outputs.wheel }}
        asset_content_type: application/zip

  windows:
    name: PyPI wheels for Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python:
        - '3.6'
        - '3.7'
        - '3.8'
        - '3.9'
        - '3.10'
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - uses: actions/cache@v2
      with:
        path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
        key: ${{ runner.os }}-chocolatey-python-1
        restore-keys: |
          ${{ runner.os }}-chocolatey-python-
          ${{ runner.os }}-chocolatey-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        choco install winflexbison3 --version 2.5.18.20190508
        #choco install swig --version 4.0.1
    - name: Build wheel
      env:
        NPROCS: 5
      run: python setup.py bdist_wheel
    - name: Wheel path
      id: wheel
      working-directory: pybuild/dist/
      run: echo "##[set-output name=wheel;]$(Get-ChildItem -name *.whl)"
    - uses: actions/upload-artifact@v2
      with:
        name: pypi-windows-py${{ matrix.python }}
        path: pybuild/dist/${{ steps.wheel.outputs.wheel }}
    - uses: actions/upload-release-asset@v1
      if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: pybuild/dist/${{ steps.wheel.outputs.wheel }}
        asset_name: ${{ steps.wheel.outputs.wheel }}
        asset_content_type: application/zip

# NOTE: disabled conda completely because it is INCREDIBLY slow on CI (multiple
# hours!) and occasionally just breaks the runners entirely after ~6 hours. It
# also doesn't appear like anyone is actually using Conda within the lab
# (anymore), as everything goes through pycQED and it is pip-only.
#
# For a release, if conda is really still necessary, it will just have to be
# done manually.
#
#  conda:
#    name: Conda wheels
#    runs-on: ${{ matrix.os }}
#    strategy:
#      fail-fast: false
#      matrix:
#        os:
#        - ubuntu-latest
#        - macos-latest
#        - windows-2016
#        python-version:
#        - '3.6'
#        - '3.7'
#        - '3.8'
#        - '3.9'
#        - '3.10'
#    steps:
#    - uses: actions/checkout@v2
#      with:
#        submodules: recursive
#    - name: Set up conda
#      uses: conda-incubator/setup-miniconda@v2
#      with:
#        auto-update-conda: true
#        miniconda-version: "latest"
#        channel-priority: strict
#        channels: conda-forge
#        show-channel-urls: true
#        use-only-tar-bz2: true
#    - name: Install Windows dependencies
#      if: matrix.os == 'windows-2016'
#      run: choco install winflexbison3 --version 2.5.18.20190508
#    - name: Install conda dependencies
#      run: conda install conda-build conda-verify -y
#    - name: Build & test
#      env:
#        NPROCS: 5
#      run: conda build conda-recipe --python=${{ matrix.python-version }}
#    - name: Wheel path
#      id: wheel
#      run: |
#        python -c "import sys,os; print('##[set-output name=path;]' + os.path.abspath(sys.argv[1])); print('##[set-output name=wheel;]' + os.path.basename(sys.argv[1]));" "$(conda build conda-recipe --python=${{ matrix.python-version }} --output)"
#        python -c "import sys; print('##[set-output name=os;]' + ('linux' if sys.argv[1].startswith('ubuntu') else 'macos' if sys.argv[1].startswith('macos') else 'windows' if sys.argv[1].startswith('windows') else 0/0))" ${{ matrix.os }}
#    - uses: actions/upload-artifact@v2
#      with:
#        name: conda-${{ steps.wheel.outputs.os }}-py${{ matrix.python-version }}
#        path: ${{ steps.wheel.outputs.path }}
#    - uses: actions/upload-release-asset@v1
#      if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ github.event.release.upload_url }}
#        asset_path: ${{ steps.wheel.outputs.path }}
#        asset_name: ${{ steps.wheel.outputs.wheel }}
#        asset_content_type: application/x-bzip2

  publish:
    name: Publish
    if: ${{ github.event_name == 'release' && github.event.action == 'created' }}
    needs:
    - macos
    - manylinux
    - windows
    #- conda
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v2
      id: download
    #- name: Publish to Anaconda cloud
    #  run: |
    #    conda install -c anaconda anaconda-client -y
    #    conda run anaconda login --username ${{ secrets.ANACONDA_USER }} --password ${{ secrets.ANACONDA_PASSWORD }}
    #    conda run anaconda upload ${{ steps.download.outputs.download-path }}/conda-*/*.bz2
    #    conda run anaconda logout
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.3.1
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        packages_dir: ${{ steps.download.outputs.download-path }}/pypi-*

